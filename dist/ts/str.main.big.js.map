{
  "version": 3,
  "sources": ["../../src/elements.ts", "../../src/crypto.ts", "../../src/helpers.ts", "../../src/loops.ts", "../../src/editor.ts", "../../src/main.ts"],
  "sourcesContent": ["let msg_send = document.getElementById(\"msg_send\");\nlet online_bar = document.getElementById(\"status_bar\");\nlet msg_input = document.getElementById(\"msg_input\");\nlet chat_div = document.getElementById(\"chat_inner_div\");\nlet msg_container = document.getElementById(\"msg_container\");\nlet servers_div = document.getElementById(\"servers_div\");\nlet info_floater = document.getElementById(\"info_floater\");\nlet server_adder = document.getElementById(\"serveradd\");\nlet typing_indicator = document.getElementById(\"typing\");\nlet div = document.getElementById(\"chat_div\");\nlet css_element = document.getElementById(\"css\");\nlet settings_menu = document.getElementById(\"settings_menu\");\nlet settings_button = document.getElementById(\"settings_button\");\n\nexport {msg_send,online_bar,msg_input,chat_div,msg_container,\n    servers_div,info_floater,server_adder,typing_indicator,\n    div,css_element,settings_menu,settings_button}", "class crypto_session {\n    static version = 1;\n    id: string;\n    other_key: CryptoKey;\n    self_keys: CryptoKeyPair;\n\n    constructor(id:string, other_key:CryptoKey, self_keys:CryptoKeyPair) {\n        this.id = id;\n        this.other_key = other_key;\n        this.self_keys = self_keys;\n    }\n\n    async encrypt(message: string): Promise<ArrayBuffer> {\n        const encoded = new TextEncoder().encode(message);\n        return await window.crypto.subtle.encrypt({ name: \"RSA-OAEP\" }, this.other_key, encoded);\n    }\n\n    async decrypt(ciphertext: ArrayBuffer): Promise<string> {\n        const decrypted = await window.crypto.subtle.decrypt({ name: \"RSA-OAEP\" }, this.self_keys.privateKey, ciphertext);\n        return new TextDecoder().decode(decrypted);\n    }\n\n    async serialize() {\n        return {\n            version: crypto_session.version,\n            id: this.id,\n            other_key: btoa(String.fromCharCode(...new Uint8Array(await window.crypto.subtle.exportKey(\"spki\", this.other_key)))),\n            self_keys: {\n                publicKey: btoa(String.fromCharCode(...new Uint8Array(await window.crypto.subtle.exportKey(\"spki\", this.self_keys.publicKey)))),\n                privateKey: btoa(String.fromCharCode(...new Uint8Array(await window.crypto.subtle.exportKey(\"pkcs8\", this.self_keys.privateKey))))\n            }\n        };\n    }\n\n    static async deserialize(data:any) {\n        if (data.version !== crypto_session.version) {\n            throw new Error(\"Incompatible crypto_session version\");\n        }\n        let other_key_buffer = Uint8Array.from(atob(data.other_key), c => c.charCodeAt(0));\n        let other_key = await window.crypto.subtle.importKey(\"spki\", other_key_buffer.buffer, { name: \"RSA-OAEP\", hash: \"SHA-256\" }, true, [\"encrypt\"]);\n        let self_public_key_buffer = Uint8Array.from(atob(data.self_keys.publicKey), c => c.charCodeAt(0));\n        let self_private_key_buffer = Uint8Array.from(atob(data.self_keys.privateKey), c => c.charCodeAt(0));\n        let self_public_key = await window.crypto.subtle.importKey(\"spki\", self_public_key_buffer.buffer, { name: \"RSA-OAEP\", hash: \"SHA-256\" }, true, [\"encrypt\"]);\n        let self_private_key = await window.crypto.subtle.importKey(\"pkcs8\", self_private_key_buffer.buffer, { name: \"RSA-OAEP\", hash: \"SHA-256\" }, true, [\"decrypt\"]);\n        let self_keys = { publicKey: self_public_key, privateKey: self_private_key };\n        return new crypto_session(data.id, other_key, self_keys);\n    }\n}\n\nasync function makeKeys() {\n    const keyPair = await window.crypto.subtle.generateKey(\n        {\n            name: \"RSA-OAEP\",\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([1, 0, 1]),\n            hash: \"SHA-256\",\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    );\n    const publicKey = await window.crypto.subtle.exportKey(\"spki\", keyPair.publicKey);\n    const privateKey = await window.crypto.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    console.log(\"Public Key:\", btoa(String.fromCharCode(...new Uint8Array(publicKey))));\n    console.log(\"Private Key:\", btoa(String.fromCharCode(...new Uint8Array(privateKey))));\n    return { publicKey, privateKey, keyPair};\n}\n\nclass crypto_manager {\n    static version = 1;\n    self_keys: CryptoKeyPair;\n    sessions: {[key:string]: crypto_session} = {};\n\n    constructor(self_keys:CryptoKeyPair) {\n        this.self_keys = self_keys;\n    }\n\n    static async init() {\n        const { keyPair } = await makeKeys();\n        return new crypto_manager(keyPair);\n    }\n\n    get_session(id:string): crypto_session {\n        if (id in this.sessions) {\n            return this.sessions[id];\n        }\n        return null;\n    }\n\n    add_session(id:string, other_key:string) {\n        if (id in this.sessions) {\n            return this.sessions[id];\n        }\n        let other_key_buffer = Uint8Array.from(atob(other_key), c => c.charCodeAt(0));\n        return window.crypto.subtle.importKey(\"spki\", other_key_buffer.buffer, { name: \"RSA-OAEP\", hash: \"SHA-256\" }, true, [\"encrypt\"]).then((imported_key) => {\n            let new_session = new crypto_session(id, imported_key, this.self_keys);\n            this.sessions[id] = new_session;\n            return new_session;\n        });\n    }\n\n    async decrypt(ciphertext: ArrayBuffer): Promise<string> { //only here because can decrypt sessionless, encryption requires session\n        const decrypted = await window.crypto.subtle.decrypt({ name: \"RSA-OAEP\" }, this.self_keys.privateKey, ciphertext);\n        return new TextDecoder().decode(decrypted);\n    }\n\n    async serialize() {\n        let sessions_serialized: {[key:string]: any} = {};\n        for (let [id, session] of Object.entries(this.sessions)) {\n            sessions_serialized[id] = session.serialize();\n        }\n        return {\n            version: crypto_manager.version,\n            self_keys: {\n                publicKey: btoa(String.fromCharCode(...new Uint8Array(await window.crypto.subtle.exportKey(\"spki\", this.self_keys.publicKey)))),\n                privateKey: btoa(String.fromCharCode(...new Uint8Array(await window.crypto.subtle.exportKey(\"pkcs8\", this.self_keys.privateKey))))\n            },\n            sessions: sessions_serialized\n        };\n    }\n\n    static async deserialize(data:any) {\n        if (data.version !== crypto_manager.version) {\n            throw new Error(\"Incompatible crypto_manager version\");\n        }\n        let self_public_key_buffer = Uint8Array.from(atob(data.self_keys.publicKey), c => c.charCodeAt(0));\n        let self_private_key_buffer = Uint8Array.from(atob(data.self_keys.privateKey), c => c.charCodeAt(0));\n        let self_public_key = await window.crypto.subtle.importKey(\"spki\", self_public_key_buffer.buffer, { name: \"RSA-OAEP\", hash: \"SHA-256\" }, true, [\"encrypt\"]);\n        let self_private_key = await window.crypto.subtle.importKey(\"pkcs8\", self_private_key_buffer.buffer, { name: \"RSA-OAEP\", hash: \"SHA-256\" }, true, [\"decrypt\"]);\n        let self_keys = { publicKey: self_public_key, privateKey: self_private_key };\n        let manager = new crypto_manager(self_keys);\n        for (let [id, session_data] of Object.entries(data.sessions)) {\n            manager.sessions[id] = await crypto_session.deserialize(session_data);\n        }\n        return manager;\n    }\n}\n\nexport { crypto_manager, crypto_session, makeKeys };", "import { Account, Message, zapGlobals } from \"./main.d\";\nimport { msg_container } from \"./elements\";\nimport { crypto_manager, crypto_session } from \"./crypto\";\n\nlet encrytion_enabled = true;\nlet encrytion_ready = false;\nlet session_crypto: crypto_manager = null\ncrypto_manager.init().then((manager) => {\n    session_crypto = manager\n    encrytion_ready = true;\n});\n\nfunction sendNotification(title: string, message: string) {\n    // Only send if page is hidden and notifications are allowed\n    if (document.hidden && Notification.permission === \"granted\") {\n        new Notification(title, { body: message });\n    }\n}\n\nfunction change_room_binder(global: zapGlobals, room: string, element: HTMLElement) {\n    return function () {\n        global.lastRenderedIndex = 0; // Reset last rendered index when changing room\n        msg_container.innerHTML = \"\";\n        global.room = room;\n        console.log(\"Changed room to:\", room);\n        // Optionally, clear the messages for the new room\n        global.messages[room] = global.messages[room] || [];\n        global.servers.forEach(function (server) {\n            let server_div = document.getElementById(\"server_\" + server.id);\n            if (server_div) {\n                server_div.classList.remove(\"selected\");\n            }\n        });\n        if (element) {\n            element.classList.add(\"selected\");\n        }\n        load_db(global.db,\"messages\").then((messages)=>{\n            console.log(messages)\n            let room_messages:Message[] = (messages.filter((a:Message)=>{return a.id && a.id.startsWith(global.room+\"--\")}) as Message[])\n            console.log(messages,room_messages)\n            global.messages[global.room].push(...room_messages)\n            global.messages[global.room].sort((a,b)=>{return a.timestamp-b.timestamp})\n            global.reTick = true;\n        })\n        global.reTick = true;\n        let send_join = function() {\n            if (!encrytion_ready) {\n                return setTimeout(send_join,10) // wait to send keys since don't have any yet\n            }\n            senders.join(global)\n            senders.crypto_request(global)\n        }\n        send_join()\n    };\n}\n\nif (typeof window.send !== 'function') {\n    console.warn(\"send() not defined. Using mock send.\");\n    window.send = function (a: any, b: any, c: any, d: any) {\n        console.debug(\"Mock send triggered with:\", [a, b, c, d]);\n    };\n}\n\nfunction lbsend(a: any, b: any, c: any, d: any, encrypt: boolean = undefined, encryption_sessions: crypto_session[] = []) {\n    if (typeof encrypt == \"undefined\") {\n        encrypt = true\n    }\n    if (encrypt && encrytion_ready) {\n        let messages: any[][] = []\n\n        let allPromises = encryption_sessions.map((session) => {\n            let enc_a = session.encrypt(JSON.stringify(a));\n            let enc_b = session.encrypt(JSON.stringify(b));\n            let enc_c = session.encrypt(JSON.stringify(c));\n            let enc_d = session.encrypt(JSON.stringify(d));\n            return Promise.all([enc_a, enc_b, enc_c, enc_d])\n                .then(([a, b, c, d]) => {\n                    let str_a = arrayBufferToBase64(a)\n                    let str_b = arrayBufferToBase64(b)\n                    let str_c = arrayBufferToBase64(c)\n                    let str_d = arrayBufferToBase64(d)\n                    messages.push([str_a, str_b, str_c, str_d, session.id])\n                });\n        });\n\n        Promise.all(allPromises).then(() => {\n            let str_msgs = JSON.stringify(messages)\n            lbsend(str_msgs, null, null, null, false)\n        });\n    } else {\n        window.send(a, b, c, d);\n        window.get(a, b, c, d);\n    }\n}\n\nfunction save(key: string, value: any) {\n    localStorage.setItem(key, JSON.stringify(value));\n}\nfunction load(key: string, Default: any) {\n    let value = localStorage.getItem(key);\n    if (value) {\n        try {\n            return JSON.parse(value);\n        }\n        catch (e) {\n            console.error(\"Error parsing JSON for key \".concat(key, \":\"), e);\n            return Default;\n        }\n    }\n    return Default;\n}\nfunction save_db_key(db: IDBDatabase, table: string, value: any, key?: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n        const tx = db.transaction(table, \"readwrite\");\n        const store = tx.objectStore(table);\n        console.log(key, value)\n        const request = store.put(value, key);\n        request.onsuccess = () => resolve();\n        request.onerror = () => reject(request.error);\n    });\n}\n\nfunction load_db_key<T>(db: IDBDatabase, table: string, key: string, Default: T): Promise<T> {\n    return new Promise((resolve, reject) => {\n        const tx = db.transaction(table, \"readonly\");\n        const store = tx.objectStore(table);\n        const request = store.get(key);\n        request.onsuccess = () => resolve(request.result ?? Default);\n        request.onerror = () => reject(request.error);\n    });\n}\n\nfunction load_db<T>(db: IDBDatabase, table: string): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n        const tx = db.transaction(table, \"readonly\");\n        const store = tx.objectStore(table);\n        const request = store.getAll();\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n    });\n}\n\nasync function encryptArray(array: any[], session: crypto_session) {\n    array = array.map((item) => {\n        return session.encrypt(JSON.stringify(item));\n    });\n    array = await Promise.all(array);\n    array = array.map((item) => {\n        return arrayBufferToBase64(item);\n    });\n    return array;\n}\n\nasync function decryptArray(array: any[]) {\n    array = array.map((item) => {\n        return base64ToArrayBuffer(item);\n    });\n    array = array.map((item) => {\n        return session_crypto.decrypt(item).then((decrypted) => {\n            return JSON.parse(decrypted);\n        });\n    });\n    return Promise.all(array);\n}\n\nfunction base64ToArrayBuffer(base64: string) {\n    let binary = atob(base64);\n    let len = binary.length;\n    let bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer) {\n    let bytes = new Uint8Array(buffer);\n    let binary = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n}\n\nlet senders: {\n    message: Function, ping: Function, join: Function\n    crypto: Function, crypto_request: Function, crypto_response: Function,\n    base: Function, bind: Function \n} = {\n    message: function (global: zapGlobals, text: string, recipients?: string[]) { // Send a message\n        if (typeof text !== \"string\") {\n            text = JSON.stringify(text);\n        }\n        if (text.length > 2 ** 12) { //4kb max\n            console.warn(\"Message too long, not sending.\");\n            return;\n        }\n        let time = Date.now();\n        let message_id = `${global.room}--${crypto.randomUUID()}-${crypto.randomUUID()}`\n        let recipients_sessions: crypto_session[] = (encrytion_enabled && recipients) ? recipients.map(r => session_crypto.get_session(r)).filter(s => s) : []\n        lbsend(0, JSON.stringify(global.account), [time, text, message_id], global.room, encrytion_enabled, recipients_sessions);\n    },\n    ping: function (global: zapGlobals, recipients?: string[]) { // Send a ping\n        let recipients_sessions: crypto_session[] = (encrytion_enabled && recipients) ? recipients.map(r => session_crypto.get_session(r)).filter(s => s) : []\n        lbsend(1, JSON.stringify(global.account), Date.now(), global.room, true, recipients_sessions);\n    },\n    join: function (global: zapGlobals) { // Send a join notif\n        lbsend(2, JSON.stringify(global.account), Date.now(), global.room, false)\n        senders.crypto_request(global)\n    }, \n    crypto: function (global: zapGlobals, message: any) { // crypto base\n        if (typeof message !== \"string\") {\n            message = JSON.stringify(message);\n        }\n        lbsend(255, JSON.stringify(global.account), message, global.room, false);\n    },\n    crypto_request: function (global: zapGlobals) { // Request a public key\n        console.debug(\"Asking for keys\")\n        senders.crypto(global, { type: \"KEYrequest\", id: global.account.id });\n    },\n    crypto_response: function (global: zapGlobals) { // Send your public key\n         console.debug(\"sending key\")\n        if (encrytion_ready && typeof global.account != \"undefined\") {\n            window.crypto.subtle.exportKey(\"spki\", session_crypto.self_keys.publicKey).then((exported) => {\n                senders.crypto(global, { type: \"KEYresponse\", id: global.account.id, public: arrayBufferToBase64(exported) });\n            });\n        } else {\n            setTimeout(senders.crypto_response, 100, [global])\n        }\n    },\n    base: function (global: zapGlobals, a: any, b: any, c: any, d: any) { window.send(a, b, c, d) },\n    bind: function (global: zapGlobals) {\n        let new_sender: any = {}\n        Object.entries(senders).forEach(([k, v]) => {\n            new_sender[k] = function (...args: any[]) {\n                v(global, ...args)\n            }\n        })\n        return new_sender\n    }\n}\n\nlet recievers: {\n    message: Function, ping: Function,\n    crypto: Function, join: Function,\n    all: Function, bind: Function\n} = {\n    message: function (global: zapGlobals, account: Account, content: [timestamp: number, message: string, id: string], room: string) {\n        var timestamp = content[0], message = content[1], id = content[2];\n        console.debug(\"Received message in room \".concat(room, \":\"), { timestamp, account, message });\n        sendNotification(\"Zap Messenger:  \" + account.name + \" sent you a message!\", message);\n        let new_message: Message = {\n            timestamp: timestamp,\n            account,\n            content: message,\n            id\n        }\n        global.messages[room].push(new_message);\n        save_db_key(global.db, \"messages\", new_message);\n    },\n    ping: function (global: zapGlobals, account: Account, content: number, room: string) {\n        if (!Object.prototype.hasOwnProperty.call(global.online, room)) {\n            global.online[room] = [];\n        }\n        let old_l = global.online[room].filter(function (v) { v.account.id == account.id; });\n        if (old_l.length == 0) {\n            old_l = [{ account, last: 20000, list: [], avg: Date.now() }];\n        }\n        let old = old_l[0];\n        var list = old.list, last = old.last;\n        last = Date.now() - content;\n        list.push(last);\n        if (list.length > 10) {\n            list.shift();\n        }\n        let avg_1 = 0;\n        list.forEach(function (delta) {\n            avg_1 += delta;\n        });\n        avg_1 /= list.length;\n        global.online[room].unshift({ account, last: content, list: list, avg: avg_1 });\n    },\n    join: function (global: zapGlobals, account: Account, content: number, room: string) { //ping but only once and unencrypted\n        recievers.ping(global, account, content, room)\n    },\n    crypto: function (global: zapGlobals, account: Account, content: any, room: string) {\n        if (typeof content === \"string\") {\n            try {\n                content = JSON.parse(content);\n            } catch (e) {\n                console.error(\"Invalid JSON crypto:\", e.message, content);\n                return;\n            }\n        }\n\n        if (!content.type) {\n            console.warn(\"No type in crypto message:\", content);\n            return;\n        }\n\n        if (content.version > crypto_manager.version) {\n            console.warn(\"Other user is on a newer version of the cryptography manager:\", content.version, \">\", crypto_manager.version);\n            console.warn(\"Some features may not work as expected and may cause glitches.\");\n        }\n\n        if (content.type == \"KEYrequest\") {\n            console.debug(\"Got key request from \"+account.id)\n            senders.crypto_response(global, account);\n        } else if (content.type == \"KEYresponse\") {\n            if (content.public && content.public != \"E2EE DENIED\") {\n                console.debug(\"Got key from \"+account.id)\n                let session = session_crypto.add_session(account.id, content.public);\n            } else {\n                console.warn(\"User \".concat(account.id, \" denied sending their public key.\"));\n            }\n        } else {\n            console.warn(\"Unknown crypto message type:\", content);\n        }\n    },\n    all: async function (global: zapGlobals, type: number | string, stringed_account?: string, content?: any, room?: string) {\n        if (stringed_account == null) { // Encrypted message, find our block\n            let enc_msg: string[][] = (JSON.parse((type as string)) as string[][])\n\n            for (let i = 0; i < (enc_msg.length); i++) {\n                let message = enc_msg[i]\n                if (message[4] == global.account.id) {\n                    type = JSON.parse(await session_crypto.decrypt(base64ToArrayBuffer(message[0])))\n                    stringed_account = JSON.parse(await session_crypto.decrypt(base64ToArrayBuffer(message[1])))\n                    content = JSON.parse(await session_crypto.decrypt(base64ToArrayBuffer(message[2])))\n                    room = JSON.parse(await session_crypto.decrypt(base64ToArrayBuffer(message[3])))\n\n                    return await recievers.all(global, type, stringed_account, content, room);\n                }\n            };\n            console.warn(\"No block for us in encrypted message, ignoring.\");\n            return;\n        }\n\n        if (!global) {\n            return;\n        } // Make sure site is loaded fully first\n        if (!global.messages[room]) {\n            global.messages[room] = [];\n        }\n        let account: Account;\n        try {\n            account = JSON.parse(stringed_account);\n        } catch (e) {\n            console.error(\"Invalid JSON acc:\", e.message, stringed_account);\n            return;\n        }\n        if (type == 0) { recievers.message(global, account, content, room) } else\n            if (type == 1) { recievers.ping(global, account, content, room) } else\n                if (type == 2) { recievers.join(global, account, content, room) } else\n                    if (type == 255) { recievers.crypto(global, account, content, room) } else { console.warn(`${type} is a unknown message type`) }\n        global.reTick = true\n    },\n    bind: function (global: zapGlobals) {\n        let new_funcs: any = {}\n        new_funcs.message = (...args: any[]) => { recievers.message(global, ...args) }\n        new_funcs.ping = (...args: any[]) => { recievers.ping(global, ...args) }\n        new_funcs.join = (...args: any[]) => { recievers.join(global, ...args) }\n        new_funcs.crypto = (...args: any[]) => { recievers.crypto(global, ...args) }\n        new_funcs.all = (...args: any[]) => { recievers.all(global, ...args) }\n        return new_funcs\n    }\n}\n\nexport { save, load, save_db_key, load_db, load_db_key, senders, recievers, sendNotification, change_room_binder }", "import { senders } from './helpers'\nimport { online_bar, div, msg_container, servers_div, chat_div } from './elements'\nimport { zapGlobals, Server } from './main.d'\nimport { change_room_binder, save } from './helpers'\n\nfunction onPing(global: zapGlobals) {\n    if (!global.online[global.room]) { global.online[global.room] = [] }\n    senders.ping(global, window.zap_global.online[window.zap_global.room].map((ping) => { return ping.account.id }));\n    Array.prototype.slice.call(online_bar.children).forEach(function (v: HTMLElement) { online_bar.removeChild(v).remove(); });\n    let now = Date.now();\n    global.online[global.room].sort(function (a, b) { return a.account.name.localeCompare(b.account.name, undefined, { sensitivity: \"base\" }); });\n    let seen = new Set();\n    global.online[global.room] =\n        global.online[global.room].filter(function (user) {\n            if (seen.has(user.account.id)) {\n                return false;\n            }\n            seen.add(user.account.id);\n            return true;\n        });\n    global.online[global.room].forEach(function (value) {\n        if ((value.last - now + 65000) > 0) {\n            let container = document.createElement(\"div\");\n            container.className = \"user_status\";\n            let status_dot = document.createElement(\"div\");\n            status_dot.style.cssText = \"border-radius:9999px; border-width:2px; width:15px; height:15px; \" + ((value.avg < 900) ? \"background-color: green;\" : ((value.avg < 30000) ? \"background-color: yellow;\" : \"background-color: red;\"));\n            container.appendChild(status_dot);\n            let username_text = document.createElement(\"p\");\n            username_text.innerText = value.account.name;\n            username_text.style.margin = \"5px\";\n            username_text.style.marginLeft = \"10px\";\n            container.appendChild(username_text);\n            online_bar.appendChild(container);\n        }\n    });\n}\n\nfunction onTick(global: zapGlobals) {\n    console.log(\"A\")\n    if (!global.reTick) { return };\n    global.reTick = false\n\n    if (!div) {\n        console.warn(\"Main div not found, reloading page to avoid conflicts.\");\n        location.reload(); // Reload if div is not found\n        return;\n    }\n\n    const messages = global.messages[global.room] || [];\n    console.log(messages)\n    const start = global.lastRenderedIndex\n    for (let i = start; i < Math.min(messages.length, start + 100); i++) {\n        let msg = messages[i];\n        try {\n            let msg_div = document.createElement(\"div\");\n            msg_div.className = \"msg\";\n            msg_div.id = \"msg_\" + msg.id;\n            msg_div.innerHTML = `<strong>${msg.account.name}</strong> \n            <span class=\"timestamp\">${new Date(msg.timestamp).toLocaleTimeString()}</span><br>`;\n            let container = document.createElement('div');\n            container.innerHTML = msg.content;\n            msg_div.appendChild(container)\n\n            msg_container.appendChild(msg_div);\n            global.lastRenderedIndex = messages.length;\n            if ((msg_container.scrollHeight - msg_container.scrollTop - msg_container.clientHeight) <= 200) {\n                msg_container.scrollTop = msg_container.scrollHeight\n            }\n        } catch (e) {\n            console.log(\"Failed to render message\", msg, e)\n        }\n    }\n\n    global.servers.forEach(function (server: Server, i) {\n        let server_div = document.getElementById(\"server_\" + server.id);\n        let server_html = `${server.img ? `<img src=\"${server.img}\" alt=\"${server.nickname}\">` : \"\"} ${server.nickname}`;\n        if (!server_div) {\n            server_div = document.createElement(\"div\");\n            server_div.className = \"server\";\n            server_div.id = \"server_\" + server.id;\n            server_div.innerHTML = server_html;\n            server_div.onclick = change_room_binder(global, server.id, server_div);\n            servers_div.insertBefore(server_div, servers_div.lastChild);\n        } else {\n            server_div.innerHTML = server_html;\n            server_div.onclick = change_room_binder(global, server.id, server_div);\n        }\n    });\n\n    div.addEventListener(\"contextmenu\", function (event: PointerEvent) {\n        const target = event.target as Element\n        const serverEl = target.closest('[id^=\"server_\"]'); // safer than direct id access\n        if (serverEl && event.button === 2) {\n            event.preventDefault();\n            const serverId = serverEl.id.replace(\"server_\", \"\");\n            let index = 0;\n            for (const server of global.servers) {\n                if (server.id === serverId) { break };\n                index++;\n            }\n            if (index === global.servers.length) { index = -1 }; // not found\n\n            if (index !== -1) {\n                const removed = global.servers.splice(index, 1)[0];\n                save(\"servers\", global.servers);\n\n                document.getElementById(\"servers_div\").removeChild(serverEl);\n                console.log(`Server ${removed.nickname} removed.`);\n                if (global.room === serverId) {\n                    global.room = global.servers.length > 0 ? global.servers[0].id : \"1\";\n                    global.lastRenderedIndex = 0;\n                    chat_div.innerHTML = \"\";\n                }\n\n                document.querySelectorAll('.server').forEach(el => el.classList.remove('selected'));\n                const newSelected = document.getElementById(\"server_\" + global.room);\n                if (newSelected) {\n                    newSelected.classList.add('selected');\n                }\n            }\n\n            return;\n        }\n    });\n}\n\nfunction bind(global: zapGlobals) {\n    let new_funcs: any = {}\n    new_funcs.onTick = function () { onTick(global) }\n    new_funcs.onPing = function () { onPing(global) }\n    return new_funcs\n}\n\nexport { onPing, onTick, bind }\n", "class Editor {\n    element:Element\n    theme:string\n    constructor (selector:string | Element, theme = \"light\") {\n        if (typeof selector == \"string\") {\n            this.element = document.querySelector(selector)\n        } else {\n            this.element = selector\n        }\n        this.theme = theme\n\n        let modifier_bar = document.createElement(\"div\")\n        modifier_bar.style.width = \"100%\"\n        modifier_bar.style.height = \"10%\"\n        modifier_bar.style.backgroundColor = theme == \"light\" ? \"#f0f0f0\" : \"#2e2e2e\"\n        modifier_bar.style.display = \"flex\"\n        modifier_bar.style.alignItems = \"center\"\n        modifier_bar.style.padding = \"0 10px\"\n        modifier_bar.style.boxSizing = \"border-box\"\n        this.element.appendChild(modifier_bar)\n\n        let bold_button = document.createElement(\"button\")\n        bold_button.innerHTML = \"<b>B</b>\"\n        bold_button.style.marginRight = \"10px\"\n        bold_button.onclick = () => {\n            document.execCommand(\"bold\")\n        }\n        modifier_bar.appendChild(bold_button)\n\n        let italic_button = document.createElement(\"button\")\n        italic_button.innerHTML = \"<i>I</i>\"\n        italic_button.style.marginRight = \"10px\"\n        italic_button.onclick = () => {\n            document.execCommand(\"italic\")\n        }\n        modifier_bar.appendChild(italic_button)\n\n        let underline_button = document.createElement(\"button\")\n        underline_button.innerHTML = \"<u>U</u>\"\n        underline_button.style.marginRight = \"10px\"\n        underline_button.onclick = () => {\n            document.execCommand(\"underline\")\n        }\n        modifier_bar.appendChild(underline_button)\n\n        let strike_button = document.createElement(\"button\")\n        strike_button.innerHTML = \"<s>S</s>\"\n        strike_button.style.marginRight = \"10px\"\n        strike_button.onclick = () => {\n            document.execCommand(\"strikeThrough\")\n        }\n        modifier_bar.appendChild(strike_button)\n\n        let file_picker = document.createElement(\"input\")\n        file_picker.type = \"file\"\n        file_picker.accept = \"image/*\"\n        file_picker.style.display = \"none\"\n        file_picker.onchange = () => {\n            let file = file_picker.files[0]\n            let reader = new FileReader()\n            reader.onload = (e) => {\n                let img = document.createElement(\"img\")\n                img.src = e.target.result as string\n                img.style.maxWidth = \"100%\"\n                img.style.height = \"auto\"\n                this.element.querySelector(\"#textinput\").appendChild(img)\n            }\n            reader.readAsDataURL(file)\n        }\n        modifier_bar.appendChild(file_picker)\n\n        let photo_button = document.createElement(\"button\")\n        photo_button.innerHTML = \"\uD83D\uDCF7\"\n        photo_button.style.marginRight = \"10px\"\n        photo_button.onclick = () => file_picker.click()\n        modifier_bar.appendChild(photo_button)\n\n        let text_input = document.createElement(\"div\")\n        text_input.contentEditable = \"true\"\n        text_input.id = \"textinput\"\n        text_input.style.width = \"100%\"\n        text_input.style.height = \"90%\"\n        text_input.style.outline = \"none\"\n        text_input.style.overflowY = \"auto\"\n        text_input.style.padding = \"10px\"\n        text_input.style.boxSizing = \"border-box\"\n        text_input.style.backgroundColor = theme == \"light\" ? \"white\" : \"#1e1e1e\"\n        text_input.style.color = theme == \"light\" ? \"black\" : \"white\"\n        text_input.style.fontFamily = \"Arial, sans-serif\"\n        text_input.style.fontSize = \"14px\"\n        this.element.appendChild(text_input)\n    }\n\n    getHTML () {\n        return this.element.querySelector(\"#textinput\").innerHTML\n    }\n\n    setHTML (html:string) {\n        this.element.querySelector(\"#textinput\").innerHTML = html\n    }\n\n    destroy () {\n        this.element.innerHTML = \"\"\n    }\n}\n\nexport {Editor}", "import { save, load, senders, recievers, change_room_binder } from './helpers'\nimport { settings_menu, server_adder, msg_send, settings_button } from './elements'\nimport { zapGlobals } from './main.d'\nimport { bind } from './loops'\nimport { Editor } from './editor'\n\ndeclare global {\n    interface Window {\n        send: Function;\n        get: Function;\n        zap_global: zapGlobals;\n    }\n}\n\nwindow.zap_global = {\n    messages: {},\n    room: \"1\",\n    servers: load(\"servers\", [{ id: \"1\", nickname: \"General\", img: \"\" }]), // {id, nickname, img}  \n    account: load(\"account\", {}), // Default \n    reTick: true,\n    lastRenderedIndex: 0,\n    dark: !load(\"dark\", window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches), // Invert toggle for later inversion\n    online: {},\n    editor: undefined,\n    db: undefined\n};\n\nlet normalizeOps = function normalizeOps(ops: [string, IDBObjectStoreParameters?][]) {\n    const final: Record<string, [string, IDBObjectStoreParameters?]> = {};\n\n    for (let [name, opts] of ops) {\n        const op = name[0];\n        const store = name.slice(1);\n        final[store] = [op, opts]; // later ops overwrite earlier ones\n    }\n\n    return Object.entries(final).map(([store, [op, opts]]) => [op + store, opts] as [string, IDBObjectStoreParameters?]);\n}\n\nlet request = window.indexedDB.open(\"ZapMessengerRW\", 1);\nrequest.onsuccess = function (e) {\n    window.zap_global.db = request.result\n}\nrequest.onupgradeneeded = (event) => {\n    const db = request.result;\n    let needed: [string, IDBObjectStoreParameters?][] = [];\n\n    switch (event.oldVersion) {\n        case 0:\n            needed.push([\"+ messages\", { keyPath: \"id\", autoIncrement: true }]);\n        case 1:\n            needed.push([\"-+ messages\", { keyPath: \"id\", autoIncrement: false }]);\n    }\n\n    needed = normalizeOps(needed)\n\n    needed.forEach(([fullop, options]) => {\n        const [op, name] = fullop.split(\" \", 2); // \"op storeName\"\n        if (op === \"+\") {\n            if (!db.objectStoreNames.contains(name)) {\n                db.createObjectStore(name, options);\n            } else {\n                console.warn(`Cannot add ${name} because it already exists`)\n            }\n        } else if (op === \"-\") {\n            if (db.objectStoreNames.contains(name)) {\n                db.deleteObjectStore(name);\n            } else {\n                console.warn(`Cannot remove ${name} because it doesn't exist`)\n            }\n        } else if (op === \"-+\") {\n            if (db.objectStoreNames.contains(name)) {\n                db.deleteObjectStore(name);\n            }\n            db.createObjectStore(name, options);\n        }\n    });\n};\n\nif (!window.zap_global.account.name) {\n    promptForAccount();\n}\n\nlet {onPing, onTick} = bind(window.zap_global)\n\nif (Notification.permission === \"default\") {\n    Notification.requestPermission();\n}\n\nfunction promptForAccount() {\n    let name = null;\n    while (!name || name.trim().length === 0) {\n        name = prompt(\"Enter your name to continue:\");\n        if (name === null) {\n            alert(\"You must enter a name to use the chat.\");\n        }\n    }\n    window.zap_global.account = {\n        name: name.trim(),\n        id: crypto.randomUUID()\n    };\n    save(\"account\", window.zap_global.account);\n}\n\nmsg_send.onclick = function () {\n    if (window.zap_global.editor) {\n        let content = window.zap_global.editor.getHTML();\n        window.zap_global.editor.setHTML('');\n        let targets = window.zap_global.online[window.zap_global.room].map((ping)=>{return ping.account.id})\n        console.log(\"Sending to targets:\", targets);\n        senders.message(window.zap_global,content,targets);\n    }\n};\n\nserver_adder.onclick = function () {\n    let server_name, server_id, server_img;\n    while (!server_name) {\n        server_name = prompt(\"Enter server name:\");\n    }\n    while (!server_id) {\n        server_id = prompt(\"Enter server ID:\");\n    }\n    server_img = prompt(\"Enter server image URL (optional):\", \"\");\n    window.zap_global.servers.push({ id: server_id, nickname: server_name, img: server_img });\n    window.zap_global.reTick = true\n    save(\"servers\", window.zap_global.servers);\n}\n\n//#region settings\nsettings_menu.classList.add(\"closed\");\nsettings_button.onclick = function () {\n    if (settings_menu.classList.contains(\"open\")) {\n        settings_menu.classList.remove(\"open\");\n        settings_menu.classList.add(\"closed\");\n    }\n    else {\n        settings_menu.classList.remove(\"closed\");\n        settings_menu.classList.add(\"open\");\n    }\n};\n//#region settings menu\nlet dark_toggle = document.createElement(\"div\");\ndark_toggle.classList.add(\"button\");\ndark_toggle.onclick = function () {\n    window.zap_global.dark = !window.zap_global.dark;\n    save(\"dark\", window.zap_global.dark);\n    if (window.zap_global.dark) {\n        document.documentElement.classList.add(\"dark\");\n    }\n    else {\n        document.documentElement.classList.remove(\"dark\");\n    }\n    let md = \"\";\n    if (window.zap_global.editor) {\n        md = window.zap_global.editor.getHTML();\n        window.zap_global.editor.destroy();\n    }\n    window.zap_global.editor = new Editor(\n        'div#msg_input',\n        window.zap_global.dark ? 'dark' : 'light'\n    );\n    window.zap_global.editor.setHTML(md);\n};\nlet dark_img = document.createElement(\"img\");\ndark_img.src = \"https://cdn-icons-png.flaticon.com/512/12377/12377255.png \";\ndark_img.style.height = \"20px\";\ndark_img.style.width = \"20px\"; \ndark_toggle.appendChild(dark_img);\nsettings_menu.appendChild(dark_toggle);\n//#endregion \nfunction onLoad() {\n    dark_toggle.click(); // Set initial dark mode state\n    setInterval(onTick, 250); // Start the animation frame loop\n    let temp = document.createElement(\"div\")\n    change_room_binder(window.zap_global,\"1\",temp)()\n    temp.remove()\n}\n\ndocument.title = \"Zap Messenger Rewritten\"\nlet id = setInterval((function () {\n    if (document.readyState == \"complete\") {\n        clearInterval(id);\n        onLoad();\n    }\n}), 100);\nsetInterval(onPing, 500);\nwindow.get = recievers.bind(window.zap_global).all"],
  "mappings": "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",
  "names": ["id", "a", "b", "c", "d", "request", "request", "id", "normalizeOps", "onPing", "onTick"]
}
