/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/ts/main.str.js":
/*!*****************************!*\
  !*** ./dist/ts/main.str.js ***!
  \*****************************/
/***/ ((module) => {

eval("{module.exports = \"window.zap_global = {\\n    messages: load(\\\"messages\\\", {}),\\n    room: \\\"1\\\",\\n    servers: load(\\\"servers\\\", [{ id: \\\"1\\\", nickname: \\\"General\\\", img: \\\"\\\" }]), // {id, nickname, img}  \\n    account: load(\\\"account\\\", {}), // Default \\n    reTick: true,\\n    lastRenderedIndex: 0,\\n    dark: !load(\\\"dark\\\", window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches), // Invert toggle for later inversion\\n    online: {},\\n    editor: undefined,\\n};\\nif (!window.zap_global.account.name) {\\n    promptForAccount();\\n}\\nif (typeof window.send !== 'function') {\\n    console.warn(\\\"send() not defined. Using mock send.\\\");\\n    window.send = function (a, b, c, d) {\\n        console.log(\\\"Mock send triggered with:\\\", [a, b, c, d]);\\n    };\\n}\\nvar msg_send = document.getElementById(\\\"msg_send\\\");\\nvar online_bar = document.getElementById(\\\"status_bar\\\");\\nvar msg_input = document.getElementById(\\\"msg_input\\\");\\nvar chat_div = document.getElementById(\\\"chat_inner_div\\\");\\nvar msg_container = document.getElementById(\\\"msg_container\\\");\\nvar servers_div = document.getElementById(\\\"servers_div\\\");\\nvar info_floater = document.getElementById(\\\"info_floater\\\");\\nvar server_adder = document.getElementById(\\\"serveradd\\\");\\nvar typing_indicator = document.getElementById(\\\"typing\\\");\\nvar div = document.getElementById(\\\"chat_div\\\");\\nvar css_element = document.getElementById(\\\"css\\\");\\nvar settings_menu = document.getElementById(\\\"settings_menu\\\");\\nvar settings_button = document.getElementById(\\\"settings_button\\\");\\nif (Notification.permission === \\\"default\\\") {\\n    Notification.requestPermission();\\n}\\n//#region Utils\\nwindow.send.message = function (text) {\\n    var time = Date.now();\\n    console.log(text);\\n    lbsend(0, JSON.stringify(window.zap_global.account), [time, text], window.zap_global.room);\\n};\\nwindow.send.ping = function () {\\n    lbsend(1, JSON.stringify(window.zap_global.account), Date.now(), window.zap_global.room);\\n};\\nfunction save(key, value) {\\n    localStorage.setItem(key, JSON.stringify(value));\\n}\\nfunction load(key, Default) {\\n    Default = Default || null;\\n    var value = localStorage.getItem(key);\\n    if (value) {\\n        try {\\n            return JSON.parse(value);\\n        }\\n        catch (e) {\\n            console.error(\\\"Error parsing JSON for key \\\".concat(key, \\\":\\\"), e);\\n            return Default;\\n        }\\n    }\\n    return Default;\\n}\\nfunction change_room_binder(room, element) {\\n    return function () {\\n        window.zap_global.lastRenderedIndex = 0; // Reset last rendered index when changing room\\n        msg_container.innerHTML = \\\"\\\";\\n        window.zap_global.room = room;\\n        console.log(\\\"Changed room to:\\\", room);\\n        // Optionally, clear the messages for the new room\\n        window.zap_global.messages[room] = window.zap_global.messages[room] || [];\\n        window.zap_global.servers.forEach(function (server) {\\n            var server_div = document.getElementById(\\\"server_\\\" + server.id);\\n            if (server_div) {\\n                server_div.classList.remove(\\\"selected\\\");\\n            }\\n        });\\n        if (element) {\\n            element.classList.add(\\\"selected\\\");\\n        }\\n        window.zap_global.reTick = true;\\n    };\\n}\\nfunction sendNotification(title, message) {\\n    // Only send if page is hidden and notifications are allowed\\n    if (document.hidden && Notification.permission === \\\"granted\\\") {\\n        new Notification(title, { body: message });\\n    }\\n}\\nfunction lbsend(a, b, c, d) {\\n    window.send(a, b, c, d);\\n    window.get(a, b, c, d);\\n}\\nfunction promptForAccount() {\\n    var name = null;\\n    while (!name || name.trim().length === 0) {\\n        name = prompt(\\\"Enter your name to continue:\\\");\\n        if (name === null) {\\n            alert(\\\"You must enter a name to use the chat.\\\");\\n        }\\n    }\\n    window.zap_global.account = {\\n        name: name.trim(),\\n        id: crypto.randomUUID()\\n    };\\n    save(\\\"account\\\", window.zap_global.account);\\n}\\n//#endregion\\nfunction onTick() {\\n    console.log(\\\"A\\\");\\n    if (!window.zap_global.reTick) {\\n        return;\\n    }\\n    ;\\n    window.zap_global.reTick = false;\\n    if (!div) {\\n        console.warn(\\\"Main div not found, reloading page to avoid conflicts.\\\");\\n        location.reload(); // Reload if div is not found\\n        return;\\n    }\\n    const messages = window.zap_global.messages[window.zap_global.room] || [];\\n    for (let i = window.zap_global.lastRenderedIndex; i < messages.length; i++) {\\n        let msg = messages[i];\\n        try {\\n            let msg_div = document.createElement(\\\"div\\\");\\n            msg_div.className = \\\"msg\\\";\\n            msg_div.id = \\\"msg_\\\" + i;\\n            msg_div.innerHTML = `<strong>${msg.account.name}</strong> \\n            <span class=\\\"timestamp\\\">${new Date(msg.timestamp).toLocaleTimeString()}</span><br>`;\\n            let container = document.createElement('div');\\n            container.innerHTML = msg.content;\\n            msg_div.appendChild(container);\\n            msg_container.appendChild(msg_div);\\n            window.zap_global.lastRenderedIndex = messages.length;\\n            if ((msg_container.scrollHeight - msg_container.scrollTop - msg_container.clientHeight) <= 200) {\\n                msg_container.scrollTop = msg_container.scrollHeight;\\n            }\\n        }\\n        catch (e) {\\n            console.log(\\\"Failed to render message\\\", msg, e);\\n        }\\n    }\\n    window.zap_global.servers.forEach(function (server, i) {\\n        let server_div = document.getElementById(\\\"server_\\\" + server.id);\\n        let server_html = `${server.img ? `<img src=\\\"${server.img}\\\" alt=\\\"${server.nickname}\\\">` : \\\"\\\"} ${server.nickname}`;\\n        if (!server_div) {\\n            server_div = document.createElement(\\\"div\\\");\\n            server_div.className = \\\"server\\\";\\n            server_div.id = \\\"server_\\\" + server.id;\\n            server_div.innerHTML = server_html;\\n            server_div.onclick = change_room_binder(server.id, server_div);\\n            servers_div.insertBefore(server_div, servers_div.lastChild);\\n        }\\n        else {\\n            server_div.innerHTML = server_html;\\n            server_div.onclick = change_room_binder(server.id, server_div);\\n        }\\n    });\\n    div.addEventListener(\\\"contextmenu\\\", function (event) {\\n        const target = event.target;\\n        const serverEl = target.closest('[id^=\\\"server_\\\"]'); // safer than direct id access\\n        if (serverEl && event.button === 2) {\\n            event.preventDefault();\\n            const serverId = serverEl.id.replace(\\\"server_\\\", \\\"\\\");\\n            let index = 0;\\n            for (const server of window.zap_global.servers) {\\n                if (server.id === serverId) {\\n                    break;\\n                }\\n                ;\\n                index++;\\n            }\\n            if (index === window.zap_global.servers.length) {\\n                index = -1;\\n            }\\n            ; // not found\\n            if (index !== -1) {\\n                const removed = window.zap_global.servers.splice(index, 1)[0];\\n                save(\\\"servers\\\", window.zap_global.servers);\\n                document.getElementById(\\\"servers_div\\\").removeChild(serverEl);\\n                console.log(`Server ${removed.nickname} removed.`);\\n                if (window.zap_global.room === serverId) {\\n                    window.zap_global.room = window.zap_global.servers.length > 0 ? window.zap_global.servers[0].id : \\\"1\\\";\\n                    window.zap_global.lastRenderedIndex = 0;\\n                    chat_div.innerHTML = \\\"\\\";\\n                }\\n                document.querySelectorAll('.server').forEach(el => el.classList.remove('selected'));\\n                const newSelected = document.getElementById(\\\"server_\\\" + window.zap_global.room);\\n                if (newSelected) {\\n                    newSelected.classList.add('selected');\\n                }\\n            }\\n            return;\\n        }\\n    });\\n}\\nfunction get(type, account, content, room) {\\n    if (!window.zap_global) {\\n        return;\\n    } // Make sure site is loaded fully first\\n    if (!window.zap_global.messages[room]) {\\n        window.zap_global.messages[room] = [];\\n    }\\n    var parsed_account;\\n    try {\\n        parsed_account = JSON.parse(account);\\n    }\\n    catch (e) {\\n        console.error(\\\"Invalid JSON acc:\\\", e.message);\\n        return;\\n    }\\n    console.log(\\\"Received data:\\\", { type: type, parsed_account: parsed_account, content: content, room: room });\\n    if (type == 0) {\\n        var timestamp = content[0], message = content[1];\\n        console.log(\\\"Received message in room \\\".concat(room, \\\":\\\"), { timestamp: timestamp, parsed_account: parsed_account, message: message });\\n        sendNotification(\\\"Zap Messenger:  \\\" + parsed_account.name + \\\" sent you a message!\\\", message);\\n        window.zap_global.messages[room].push({\\n            timestamp: timestamp,\\n            account: parsed_account,\\n            content: message\\n        });\\n        save(\\\"messages\\\", window.zap_global.messages);\\n    }\\n    else if (type == 1) {\\n        if (!Object.prototype.hasOwnProperty.call(window.zap_global.online, room)) {\\n            window.zap_global.online[room] = [];\\n        }\\n        var old_l = window.zap_global.online[room].filter(function (v) { v.account.id == parsed_account.id; });\\n        if (old_l.length == 0) {\\n            old_l = [{ account: parsed_account, last: 20000, list: [], avg: Date.now() }];\\n        }\\n        var old = old_l[0];\\n        var list = old.list, last = old.last;\\n        last = Date.now() - content;\\n        list.push(last);\\n        if (list.length > 10) {\\n            list.shift();\\n        }\\n        var avg_1 = 0;\\n        list.forEach(function (delta) {\\n            avg_1 += delta;\\n        });\\n        avg_1 /= list.length;\\n        window.zap_global.online[room].push({ account: parsed_account, last: content, list: list, avg: avg_1 });\\n    }\\n    window.zap_global.reTick = true;\\n}\\nmsg_send.onclick = function () {\\n    if (window.zap_global.editor) {\\n        var content = window.zap_global.editor.getHTML();\\n        window.zap_global.editor.setHTML('');\\n        window.send.message(content);\\n    }\\n};\\nserver_adder.onclick = function () {\\n    let server_name, server_id, server_img;\\n    while (!server_name) {\\n        server_name = prompt(\\\"Enter server name:\\\");\\n    }\\n    while (!server_id) {\\n        server_id = prompt(\\\"Enter server ID:\\\");\\n    }\\n    server_img = prompt(\\\"Enter server image URL (optional):\\\", \\\"\\\");\\n    window.zap_global.servers.push({ id: server_id, nickname: server_name, img: server_img });\\n    window.zap_global.reTick = true;\\n    save(\\\"servers\\\", window.zap_global.servers);\\n};\\n//#region settings\\nsettings_menu.classList.add(\\\"closed\\\");\\nsettings_button.onclick = function () {\\n    if (settings_menu.classList.contains(\\\"open\\\")) {\\n        settings_menu.classList.remove(\\\"open\\\");\\n        settings_menu.classList.add(\\\"closed\\\");\\n    }\\n    else {\\n        settings_menu.classList.remove(\\\"closed\\\");\\n        settings_menu.classList.add(\\\"open\\\");\\n    }\\n};\\n//#region settings menu\\nvar dark_toggle = document.createElement(\\\"div\\\");\\ndark_toggle.classList.add(\\\"button\\\");\\ndark_toggle.onclick = function () {\\n    window.zap_global.dark = !window.zap_global.dark;\\n    save(\\\"dark\\\", window.zap_global.dark);\\n    if (window.zap_global.dark) {\\n        document.documentElement.classList.add(\\\"dark\\\");\\n    }\\n    else {\\n        document.documentElement.classList.remove(\\\"dark\\\");\\n    }\\n    var md = \\\"\\\";\\n    if (window.zap_global.editor) {\\n        md = window.zap_global.editor.getMarkdown();\\n        window.zap_global.editor.destroy();\\n    }\\n    window.zap_global.editor = new window.toastui.Editor({\\n        el: document.querySelector('div#msg_input'),\\n        height: '300px',\\n        initialEditType: 'wysiwyg',\\n        previewStyle: 'none',\\n        usageStatistics: false,\\n        theme: window.zap_global.dark ? 'dark' : 'light',\\n    });\\n    window.zap_global.editor.setMarkdown(md);\\n};\\nvar dark_img = document.createElement(\\\"img\\\");\\ndark_img.src = \\\"https://cdn-icons-png.flaticon.com/512/12377/12377255.png \\\";\\ndark_img.style.height = \\\"20px\\\";\\ndark_img.style.width = \\\"20px\\\";\\ndark_toggle.appendChild(dark_img);\\nsettings_menu.appendChild(dark_toggle);\\n//#endregion\\nfunction onLoad() {\\n    dark_toggle.click(); // Set initial dark mode state\\n    setInterval(onTick, 250); // Start the animation frame loop\\n}\\ndocument.title = \\\"Zap Messenger Rewritten\\\";\\nvar id = setInterval((function () {\\n    if (typeof window.toastui != \\\"undefined\\\") {\\n        clearInterval(id);\\n        onLoad();\\n    }\\n}), 1);\\nsetInterval((function () {\\n    window.send.ping();\\n    Array.prototype.slice.call(online_bar.children).forEach(function (v) { online_bar.removeChild(v).remove(); });\\n    var now = Date.now();\\n    window.zap_global.online[window.zap_global.room].sort(function (a, b) { return a.account.name.localeCompare(b.account.name, undefined, { sensitivity: \\\"base\\\" }); });\\n    var seen = new Set();\\n    window.zap_global.online[window.zap_global.room] =\\n        window.zap_global.online[window.zap_global.room].filter(function (user) {\\n            if (seen.has(user.account.id)) {\\n                return false;\\n            }\\n            seen.add(user.account.id);\\n            return true;\\n        });\\n    window.zap_global.online[window.zap_global.room].forEach(function (value) {\\n        if ((value.last - now + 65000) > 0) {\\n            var container = document.createElement(\\\"div\\\");\\n            container.className = \\\"user_status\\\";\\n            var status_dot = document.createElement(\\\"div\\\");\\n            status_dot.style.cssText = \\\"border-radius:9999px; border-width:2px; width:15px; height:15px; \\\" + ((value.avg < 900) ? \\\"background-color: green;\\\" : ((value.avg < 30000) ? \\\"background-color: yellow;\\\" : \\\"background-color: red;\\\"));\\n            container.appendChild(status_dot);\\n            var username_text = document.createElement(\\\"p\\\");\\n            username_text.innerText = value.account.name;\\n            username_text.style.margin = \\\"5px\\\";\\n            username_text.style.marginLeft = \\\"10px\\\";\\n            container.appendChild(username_text);\\n            online_bar.appendChild(container);\\n        }\\n    });\\n}), 500);\\n\";\n\n//# sourceURL=webpack://zapmessenger/./dist/ts/main.str.js?\n}");

/***/ }),

/***/ "./src/body.css":
/*!**********************!*\
  !*** ./src/body.css ***!
  \**********************/
/***/ ((module) => {

eval("{module.exports = \":root {\\n\\t--bg: #777;\\n\\t--chat-bg: #FFF;\\n\\t--chat-msg-bg: #f1f1f1;\\n    --chat-msg-text:#333;\\n\\n\\t--sidebar-status-bg: #DDD;\\n\\t--sidebar-status-user-bg: #BBB;\\n\\n    --sidebar-server-icon-bg: #444;\\n    --sidebar-server-icon-text: #FFF;\\n\\t--sidebar-server-bg: #4f4f4f;\\n\\t--sidebar-server-button-icon: #444;\\n\\n    --sidebar-settings-bg: #DDD;\\n    --sidebar-settings-button-bg: #BBB;\\n    --sidebar-settings-button-text: #333;\\n\\n    --sidebar-info-bg:rgba(0, 0, 0, 0.25);\\n    --sidebar-info-text:rgba(105, 105, 105, 0.75);\\n}\\n\\n:root.dark {\\n    --bg: #222;\\n    --chat-bg: #333;\\n    --chat-msg-bg: #444;\\n    --chat-msg-text:#EEE;\\n    \\n    --sidebar-status-bg: #555;\\n    --sidebar-status-user-bg: #666;\\n\\n    --sidebar-server-bg: #111;\\n    --sidebar-server-button-icon: #222;\\n    --sidebar-server-icon-bg: #222;\\n    --sidebar-server-icon-text: #FFF;\\n\\n    --sidebar-info-bg:rgba(255, 255, 255, 0.1);\\n    --sidebar-info-text:rgba(200, 200, 200, 0.5);\\n\\n    --sidebar-settings-bg: #222;\\n    --sidebar-settings-button-bg: #444;\\n    --sidebar-settings-button-text: #EEE;\\n}\\n\\n#servers_div {\\n    position: absolute;\\n    top: 0px;\\n    left: 0px;\\n    width: 75px;\\n    height: 100%;\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    background-color: var(--sidebar-server-bg);\\n    overflow-y: scroll;\\n}\\n\\n#info_floater {\\n    position: absolute;\\n    bottom: 0px;\\n    left: 0px;\\n    max-width: 75px;\\n    z-index: 1000;\\n    background-color: var(--sidebar-info-bg);\\n    color: var(--sidebar-info-text);\\n    font-family: Arial, sans-serif;\\n}\\n\\n.server img {\\n    width: 100%;\\n    height: 100%;\\n    aspect-ratio: 1 / 1;\\n    border-radius: 9999px;\\n    object-fit: cover;\\n    object-position: center;\\n}\\n\\n.server {\\n    width: 100%;\\n    aspect-ratio: 1 / 1;\\n    padding: 10px;\\n    box-sizing: border-box;\\n    border-radius: 9999px;\\n    background-color: var(--sidebar-server-icon-bg);\\n    margin: 5px 0;\\n    color: var(--sidebar-server-icon-text);\\n    text-align: center;\\n    display: flex;\\n    justify-content: center;\\n    cursor: pointer;\\n}\\n\\n.server.selected {\\n    outline: 3px solid limegreen;\\n}\\n\\n#chat_inner_div img {\\n    max-width:60%;\\n    max-height:60%;\\n}\\n\\n#chat_inner_div {\\n    position: absolute;\\n    top: 0px;\\n    right: 0px;\\n    width: calc(100% - 75px);\\n    height: 100%;\\n    overflow-y: hidden;\\n    background-color: var(--chat-bg);\\n    display: flex;\\n    align-items: left;\\n    flex-direction: column;\\n}\\n\\n#msg_container {\\n    width:100;\\n    height:calc(100% - 50px);\\n    overflow-y: scroll;\\n    padding-bottom: 150px;\\n}\\n\\n.msg {\\n    width: 100%;\\n    padding: 10px;\\n    box-sizing: border-box;\\n    border-radius: 50px;\\n    background-color: var(--chat-msg-bg);\\n    margin: 5px 0;\\n    position: relative;\\n    font-family: Arial, sans-serif;\\n    color: var(--chat-msg-text);\\n}\\n\\n#message_input_div {\\n    position: absolute;\\n    bottom: 0px;\\n    right: 0px;\\n    width: 100%;\\n    height: 300px;\\n    border-radius: 9999px;\\n    display: flex;\\n    flex-direction: row;\\n}\\n\\n#msg_input {\\n    border-color: black;\\n    margin-right: 10px;\\n    width: 100%;\\n    height: 100%;\\n    overflow: auto;\\n}\\n\\n#msg_send {\\n    margin-right: 10px;\\n    aspect-ratio: 1 / 1;\\n    height: 50px;\\n    border-radius: 50%;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    padding: 0;\\n    border: none;\\n    background: none;\\n    cursor: pointer;\\n}\\n\\n#msg_send_img {\\n    width: 100%;\\n    height: 100%;\\n    border-radius: 50%;\\n    object-fit: cover;\\n    object-position: center;\\n}\\n\\n.user_status {\\n    display: flex;\\n    flex-direction: row;\\n    border-radius: 10px;\\n    margin: 2px;\\n    border-style: solid;\\n    border-width: 1px;\\n    background-color: var(--sidebar-status-user-bg);\\n    align-items: center;\\n    padding: 0.5em;\\n}\\n\\n#chat_div {\\n    position: absolute;\\n    top: 0px;\\n    left: 0px;\\n    width: 100%;\\n    height: 100%;\\n    z-index: 0;\\n    background-color: var(--chat-bg);\\n}\\n\\n#status_bar {\\n    position: absolute;\\n    right: 0px;\\n    top: 0px;\\n    height: 100px; \\n    width: 150px;\\n    background-color: var(--sidebar-status-bg);\\n    display: flex;\\n    flex-direction: column;\\n    overflow-y: scroll;\\n    border-radius: 10px;\\n}\\n\\n#settings_menu {\\n    position: absolute;\\n    top: 5%;\\n    width: 90%;\\n    height: 100px;\\n    border-radius: 10px;\\n    background-color: var(--sidebar-settings-bg);\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    cursor: pointer;\\n}\\n\\n#settings_menu.open {\\n    left: 5%;\\n    transition: left 0.5s ease, border-radius 0.5s ease;\\n}\\n\\n#settings_menu.closed {\\n    left: -100%;\\n    transition: left 0.5s ease, border-radius 0.5s ease;\\n}\\n\\n#settings_menu .button {\\n    width: 50px;\\n    height: 50px;\\n    border-radius: 9999px;\\n    margin: 10px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    background-color: var(--sidebar-settings-button-bg);\\n    color: var(--sidebar-settings-button-text);\\n    cursor: pointer;\\n    font-family: Arial, sans-serif;\\n}\\n\\n.toastui-editor-mode-switch {\\n  display: none !important;\\n}\";\n\n//# sourceURL=webpack://zapmessenger/./src/body.css?\n}");

/***/ }),

/***/ "./src/body.html":
/*!***********************!*\
  !*** ./src/body.html ***!
  \***********************/
/***/ ((module) => {

eval("{module.exports = \"<link rel=\\\"stylesheet\\\" href=\\\"https://uicdn.toast.com/editor/latest/toastui-editor.min.css\\\" />\\n<link rel=\\\"stylesheet\\\" href=\\\"https://uicdn.toast.com/editor/latest/theme/toastui-editor-dark.min.css\\\" />\\n<script src=\\\"https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js\\\"></script>\\n\\n<div id=\\\"chat_div\\\">\\n    <div id=\\\"servers_div\\\">\\n        <div class=\\\"server\\\" id=\\\"serveradd\\\">\\n            <img src=\\\"https://cdn-icons-png.flaticon.com/512/1237/1237946.png\\\" alt=\\\"Add Server\\\" />\\n        </div>\\n        <div class=\\\"server\\\" id=\\\"settings_button\\\">\\n            <img src=\\\"https://cdn-icons-png.flaticon.com/512/503/503849.png\\\" />\\n        </div>\\n    </div>\\n    <div id=\\\"chat_inner_div\\\">\\n        <div id=\\\"msg_container\\\"></div>\\n        <div id=\\\"message_input_div\\\">\\n            <div id=\\\"msg_input\\\"></div>\\n            <button id=\\\"msg_send\\\">\\n                <img id=\\\"msg_send_img\\\" src=\\\"https://cdn-icons-png.flaticon.com/512/3682/3682321.png\\\" alt=\\\"Send\\\" />\\n            </button>\\n        </div>\\n        <div id=\\\"status_bar\\\"></div>\\n    </div>\\n    <div id=\\\"info_floater\\\"></div>\\n    <div id=\\\"settings_menu\\\"></div>\\n</div>\";\n\n//# sourceURL=webpack://zapmessenger/./src/body.html?\n}");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _body_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./body.html */ \"./src/body.html\");\n/* harmony import */ var _body_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./body.css */ \"./src/body.css\");\n/* harmony import */ var _manifest_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./manifest.json */ \"./src/manifest.json\");\n/* harmony import */ var _main_worker_str_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./main_worker.str.js */ \"./src/main_worker.str.js\");\n/* harmony import */ var _dist_ts_main_str_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dist/ts/main.str.js */ \"./dist/ts/main.str.js\");\n\n\n\n\n\n\nfunction create_script(src) {\n    let script = document.createElement(\"script\")\n    document.body.appendChild(script)\n    script.src = src\n    return script\n}\n\nfunction create_text_script(text) {\n    let blob = new Blob([_dist_ts_main_str_js__WEBPACK_IMPORTED_MODULE_4__], { type: 'application/javascript' });\n    let blobUrl = URL.createObjectURL(blob);\n    let script = create_script(blobUrl);\n    script.onload = (() => { URL.revokeObjectURL(blobUrl) });\n    return script\n}\n\nfunction create_css(text) {\n    const style = document.createElement('style');\n    style.textContent = text;\n    document.head.appendChild(style);\n}\n\nfunction create_html(text, parent, ...a) {\n    /**\n     * Adds text as a html object to the parent object\n     * @param {string} text - The html code\n     * @param {HTMLElement} parent - The parent for the code\n     */\n    const container = document.createElement('div');\n    container.innerHTML = text;\n    \n    // Append elements (except scripts)\n    Array.from(container.children).forEach(el => {\n        if (el.tagName !== 'SCRIPT') {parent.appendChild(el)}\n    });\n\n    // Execute scripts\n    Array.from(container.querySelectorAll('script')).forEach(script => {\n        if (script.src) {\n            create_script(script.src);\n        } else {\n            create_text_script(script.textContent);\n        }\n    });\n}\n\n\nlet div = document.getElementById(\"chat_div\");\nif (div) {\n    location.reload(); // Reload if div already exists\n    throw Error(\"Chat div already exists, reloading page to avoid conflicts.\")\n}\n\nfor (let i = 0; i < document.body.children.length; i++) {\n    document.body.children[i].style.display = \"none\";\n}\n\nconsole.log(\"HTML & CSS\")\ncreate_css(_body_css__WEBPACK_IMPORTED_MODULE_1__)\ncreate_html(_body_html__WEBPACK_IMPORTED_MODULE_0__, document.body)\n\n// Manifest\nconsole.log(\"manifest\")\n\nconst jsonString = JSON.stringify(_manifest_json__WEBPACK_IMPORTED_MODULE_2__);\nlet manifestblob = new Blob([jsonString], { type: 'application/json' });\nlet manifestblobUrl = URL.createObjectURL(manifestblob);\nlet manifestLink = document.createElement('link'); \n\nmanifestLink.rel = 'manifest';\ndocument.head.appendChild(manifestLink);\nmanifestLink.href = manifestblobUrl;\n\nmanifestLink.onload = (() => { URL.revokeObjectURL(manifestblobUrl) })\n\nconsole.log(\"worker\")\nlet workerblob = new Blob([_main_worker_str_js__WEBPACK_IMPORTED_MODULE_3__], { type: 'application/javascript' });\nlet workerblobUrl = URL.createObjectURL(workerblob);\n\nwindow.worker = new Worker(workerblobUrl)\n\n// Main js\nconsole.log(\"script\")\ncreate_text_script(_dist_ts_main_str_js__WEBPACK_IMPORTED_MODULE_4__)\n\n//# sourceURL=webpack://zapmessenger/./src/index.js?\n}");

/***/ }),

/***/ "./src/main_worker.str.js":
/*!********************************!*\
  !*** ./src/main_worker.str.js ***!
  \********************************/
/***/ ((module) => {

eval("{module.exports = \"\";\n\n//# sourceURL=webpack://zapmessenger/./src/main_worker.str.js?\n}");

/***/ }),

/***/ "./src/manifest.json":
/*!***************************!*\
  !*** ./src/manifest.json ***!
  \***************************/
/***/ ((module) => {

eval("{module.exports = /*#__PURE__*/JSON.parse('{\"name\":\"Zap Messenger\",\"short_name\":\"Zap\",\"start_url\":\"https://bitsbox.com/run-app.html?8scdd\",\"display\":\"standalone\",\"background_color\":\"#1a1a1a\",\"theme_color\":\"#2575fc\"}');\n\n//# sourceURL=webpack://zapmessenger/./src/manifest.json?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;