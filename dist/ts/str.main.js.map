{
  "version": 3,
  "sources": ["../../src/elements.ts", "../../src/crypto.ts", "../../src/helpers.ts", "../../src/loops.ts", "../../src/editor.ts", "../../src/main.ts"],
  "sourcesContent": ["let msg_send = document.getElementById(\"msg_send\");\nlet online_bar = document.getElementById(\"status_bar\");\nlet msg_input = document.getElementById(\"msg_input\");\nlet chat_div = document.getElementById(\"chat_inner_div\");\nlet msg_container = document.getElementById(\"msg_container\");\nlet servers_div = document.getElementById(\"servers_div\");\nlet info_floater = document.getElementById(\"info_floater\");\nlet server_adder = document.getElementById(\"serveradd\");\nlet typing_indicator = document.getElementById(\"typing\");\nlet div = document.getElementById(\"chat_div\");\nlet css_element = document.getElementById(\"css\");\nlet settings_menu = document.getElementById(\"settings_menu\");\nlet settings_button = document.getElementById(\"settings_button\");\n\nexport {msg_send,online_bar,msg_input,chat_div,msg_container,\n    servers_div,info_floater,server_adder,typing_indicator,\n    div,css_element,settings_menu,settings_button}", "class crypto_session {\n    static version = 1;\n    id: string;\n    other_key: CryptoKey;\n    self_keys: CryptoKeyPair;\n\n    constructor(id:string, other_key:CryptoKey, self_keys:CryptoKeyPair) {\n        this.id = id;\n        this.other_key = other_key;\n        this.self_keys = self_keys;\n    }\n\n    async encrypt(message: string): Promise<ArrayBuffer> {\n        const encoded = new TextEncoder().encode(message);\n        return await window.crypto.subtle.encrypt({ name: \"RSA-OAEP\" }, this.other_key, encoded);\n    }\n\n    async decrypt(ciphertext: ArrayBuffer): Promise<string> {\n        const decrypted = await window.crypto.subtle.decrypt({ name: \"RSA-OAEP\" }, this.self_keys.privateKey, ciphertext);\n        return new TextDecoder().decode(decrypted);\n    }\n\n    async serialize() {\n        return {\n            version: crypto_session.version,\n            id: this.id,\n            other_key: btoa(String.fromCharCode(...new Uint8Array(await window.crypto.subtle.exportKey(\"spki\", this.other_key)))),\n            self_keys: {\n                publicKey: btoa(String.fromCharCode(...new Uint8Array(await window.crypto.subtle.exportKey(\"spki\", this.self_keys.publicKey)))),\n                privateKey: btoa(String.fromCharCode(...new Uint8Array(await window.crypto.subtle.exportKey(\"pkcs8\", this.self_keys.privateKey))))\n            }\n        };\n    }\n\n    static async deserialize(data:any) {\n        if (data.version !== crypto_session.version) {\n            throw new Error(\"Incompatible crypto_session version\");\n        }\n        let other_key_buffer = Uint8Array.from(atob(data.other_key), c => c.charCodeAt(0));\n        let other_key = await window.crypto.subtle.importKey(\"spki\", other_key_buffer.buffer, { name: \"RSA-OAEP\", hash: \"SHA-256\" }, true, [\"encrypt\"]);\n        let self_public_key_buffer = Uint8Array.from(atob(data.self_keys.publicKey), c => c.charCodeAt(0));\n        let self_private_key_buffer = Uint8Array.from(atob(data.self_keys.privateKey), c => c.charCodeAt(0));\n        let self_public_key = await window.crypto.subtle.importKey(\"spki\", self_public_key_buffer.buffer, { name: \"RSA-OAEP\", hash: \"SHA-256\" }, true, [\"encrypt\"]);\n        let self_private_key = await window.crypto.subtle.importKey(\"pkcs8\", self_private_key_buffer.buffer, { name: \"RSA-OAEP\", hash: \"SHA-256\" }, true, [\"decrypt\"]);\n        let self_keys = { publicKey: self_public_key, privateKey: self_private_key };\n        return new crypto_session(data.id, other_key, self_keys);\n    }\n}\n\nasync function makeKeys() {\n    const keyPair = await window.crypto.subtle.generateKey(\n        {\n            name: \"RSA-OAEP\",\n            modulusLength: 2048,\n            publicExponent: new Uint8Array([1, 0, 1]),\n            hash: \"SHA-256\",\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    );\n    const publicKey = await window.crypto.subtle.exportKey(\"spki\", keyPair.publicKey);\n    const privateKey = await window.crypto.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    console.log(\"Public Key:\", btoa(String.fromCharCode(...new Uint8Array(publicKey))));\n    console.log(\"Private Key:\", btoa(String.fromCharCode(...new Uint8Array(privateKey))));\n    return { publicKey, privateKey, keyPair};\n}\n\nclass crypto_manager {\n    static version = 1;\n    self_keys: CryptoKeyPair;\n    sessions: {[key:string]: crypto_session} = {};\n\n    constructor(self_keys:CryptoKeyPair) {\n        this.self_keys = self_keys;\n    }\n\n    static async init() {\n        const { keyPair } = await makeKeys();\n        return new crypto_manager(keyPair);\n    }\n\n    get_session(id:string): crypto_session {\n        if (id in this.sessions) {\n            return this.sessions[id];\n        }\n        return null;\n    }\n\n    add_session(id:string, other_key:string) {\n        if (id in this.sessions) {\n            return this.sessions[id];\n        }\n        let other_key_buffer = Uint8Array.from(atob(other_key), c => c.charCodeAt(0));\n        return window.crypto.subtle.importKey(\"spki\", other_key_buffer.buffer, { name: \"RSA-OAEP\", hash: \"SHA-256\" }, true, [\"encrypt\"]).then((imported_key) => {\n            let new_session = new crypto_session(id, imported_key, this.self_keys);\n            this.sessions[id] = new_session;\n            return new_session;\n        });\n    }\n\n    async decrypt(ciphertext: ArrayBuffer): Promise<string> { //only here because can decrypt sessionless, encryption requires session\n        const decrypted = await window.crypto.subtle.decrypt({ name: \"RSA-OAEP\" }, this.self_keys.privateKey, ciphertext);\n        return new TextDecoder().decode(decrypted);\n    }\n\n    async serialize() {\n        let sessions_serialized: {[key:string]: any} = {};\n        for (let [id, session] of Object.entries(this.sessions)) {\n            sessions_serialized[id] = session.serialize();\n        }\n        return {\n            version: crypto_manager.version,\n            self_keys: {\n                publicKey: btoa(String.fromCharCode(...new Uint8Array(await window.crypto.subtle.exportKey(\"spki\", this.self_keys.publicKey)))),\n                privateKey: btoa(String.fromCharCode(...new Uint8Array(await window.crypto.subtle.exportKey(\"pkcs8\", this.self_keys.privateKey))))\n            },\n            sessions: sessions_serialized\n        };\n    }\n\n    static async deserialize(data:any) {\n        if (data.version !== crypto_manager.version) {\n            throw new Error(\"Incompatible crypto_manager version\");\n        }\n        let self_public_key_buffer = Uint8Array.from(atob(data.self_keys.publicKey), c => c.charCodeAt(0));\n        let self_private_key_buffer = Uint8Array.from(atob(data.self_keys.privateKey), c => c.charCodeAt(0));\n        let self_public_key = await window.crypto.subtle.importKey(\"spki\", self_public_key_buffer.buffer, { name: \"RSA-OAEP\", hash: \"SHA-256\" }, true, [\"encrypt\"]);\n        let self_private_key = await window.crypto.subtle.importKey(\"pkcs8\", self_private_key_buffer.buffer, { name: \"RSA-OAEP\", hash: \"SHA-256\" }, true, [\"decrypt\"]);\n        let self_keys = { publicKey: self_public_key, privateKey: self_private_key };\n        let manager = new crypto_manager(self_keys);\n        for (let [id, session_data] of Object.entries(data.sessions)) {\n            manager.sessions[id] = await crypto_session.deserialize(session_data);\n        }\n        return manager;\n    }\n}\n\nexport { crypto_manager, crypto_session, makeKeys };", "import { Account, Message, zapGlobals } from \"./main.d\";\nimport { msg_container } from \"./elements\";\nimport { crypto_manager, crypto_session } from \"./crypto\";\n\nlet encrytion_enabled = true;\nlet encrytion_ready = false;\nlet session_crypto: crypto_manager = null\ncrypto_manager.init().then((manager) => {\n    session_crypto = manager\n    encrytion_ready = true;\n});\n\nfunction sendNotification(title: string, message: string) {\n    // Only send if page is hidden and notifications are allowed\n    if (document.hidden && Notification.permission === \"granted\") {\n        new Notification(title, { body: message });\n    }\n}\n\nfunction change_room_binder(global: zapGlobals, room: string, element: HTMLElement) {\n    return function () {\n        global.lastRenderedIndex = 0; // Reset last rendered index when changing room\n        msg_container.innerHTML = \"\";\n        global.room = room;\n        console.log(\"Changed room to:\", room);\n        // Optionally, clear the messages for the new room\n        global.messages[room] = global.messages[room] || [];\n        global.servers.forEach(function (server) {\n            let server_div = document.getElementById(\"server_\" + server.id);\n            if (server_div) {\n                server_div.classList.remove(\"selected\");\n            }\n        });\n        if (element) {\n            element.classList.add(\"selected\");\n        }\n        load_db(global.db,\"messages\").then((messages)=>{\n            console.log(messages)\n            let room_messages:Message[] = (messages.filter((a:Message)=>{return a.id && a.id.startsWith(global.room+\"--\")}) as Message[])\n            console.log(messages,room_messages)\n            global.messages[global.room].push(...room_messages)\n            global.messages[global.room].sort((a,b)=>{return a.timestamp-b.timestamp})\n            global.reTick = true;\n        })\n        global.reTick = true;\n        let send_join = function() {\n            if (!encrytion_ready) {\n                return setTimeout(send_join,10) // wait to send keys since don't have any yet\n            }\n            senders.join(global)\n            senders.crypto_request(global)\n        }\n        send_join()\n    };\n}\n\nif (typeof window.send !== 'function') {\n    console.warn(\"send() not defined. Using mock send.\");\n    window.send = function (a: any, b: any, c: any, d: any) {\n        console.debug(\"Mock send triggered with:\", [a, b, c, d]);\n    };\n}\n\nfunction lbsend(a: any, b: any, c: any, d: any, encrypt: boolean = undefined, encryption_sessions: crypto_session[] = []) {\n    if (typeof encrypt == \"undefined\") {\n        encrypt = true\n    }\n    if (encrypt && encrytion_ready) {\n        let messages: any[][] = []\n\n        let allPromises = encryption_sessions.map((session) => {\n            let enc_a = session.encrypt(JSON.stringify(a));\n            let enc_b = session.encrypt(JSON.stringify(b));\n            let enc_c = session.encrypt(JSON.stringify(c));\n            let enc_d = session.encrypt(JSON.stringify(d));\n            return Promise.all([enc_a, enc_b, enc_c, enc_d])\n                .then(([a, b, c, d]) => {\n                    let str_a = arrayBufferToBase64(a)\n                    let str_b = arrayBufferToBase64(b)\n                    let str_c = arrayBufferToBase64(c)\n                    let str_d = arrayBufferToBase64(d)\n                    messages.push([str_a, str_b, str_c, str_d, session.id])\n                });\n        });\n\n        Promise.all(allPromises).then(() => {\n            let str_msgs = JSON.stringify(messages)\n            lbsend(str_msgs, null, null, null, false)\n        });\n    } else {\n        window.send(a, b, c, d);\n        window.get(a, b, c, d);\n    }\n}\n\nfunction save(key: string, value: any) {\n    localStorage.setItem(key, JSON.stringify(value));\n}\nfunction load(key: string, Default: any) {\n    let value = localStorage.getItem(key);\n    if (value) {\n        try {\n            return JSON.parse(value);\n        }\n        catch (e) {\n            console.error(\"Error parsing JSON for key \".concat(key, \":\"), e);\n            return Default;\n        }\n    }\n    return Default;\n}\nfunction save_db_key(db: IDBDatabase, table: string, value: any, key?: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n        const tx = db.transaction(table, \"readwrite\");\n        const store = tx.objectStore(table);\n        console.log(key, value)\n        const request = store.put(value, key);\n        request.onsuccess = () => resolve();\n        request.onerror = () => reject(request.error);\n    });\n}\n\nfunction load_db_key<T>(db: IDBDatabase, table: string, key: string, Default: T): Promise<T> {\n    return new Promise((resolve, reject) => {\n        const tx = db.transaction(table, \"readonly\");\n        const store = tx.objectStore(table);\n        const request = store.get(key);\n        request.onsuccess = () => resolve(request.result ?? Default);\n        request.onerror = () => reject(request.error);\n    });\n}\n\nfunction load_db<T>(db: IDBDatabase, table: string): Promise<T[]> {\n    return new Promise((resolve, reject) => {\n        const tx = db.transaction(table, \"readonly\");\n        const store = tx.objectStore(table);\n        const request = store.getAll();\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n    });\n}\n\nasync function encryptArray(array: any[], session: crypto_session) {\n    array = array.map((item) => {\n        return session.encrypt(JSON.stringify(item));\n    });\n    array = await Promise.all(array);\n    array = array.map((item) => {\n        return arrayBufferToBase64(item);\n    });\n    return array;\n}\n\nasync function decryptArray(array: any[]) {\n    array = array.map((item) => {\n        return base64ToArrayBuffer(item);\n    });\n    array = array.map((item) => {\n        return session_crypto.decrypt(item).then((decrypted) => {\n            return JSON.parse(decrypted);\n        });\n    });\n    return Promise.all(array);\n}\n\nfunction base64ToArrayBuffer(base64: string) {\n    let binary = atob(base64);\n    let len = binary.length;\n    let bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer) {\n    let bytes = new Uint8Array(buffer);\n    let binary = \"\";\n    for (let i = 0; i < bytes.length; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n}\n\nlet senders: {\n    message: Function, ping: Function, join: Function\n    crypto: Function, crypto_request: Function, crypto_response: Function,\n    base: Function, bind: Function \n} = {\n    message: function (global: zapGlobals, text: string, recipients?: string[]) { // Send a message\n        if (typeof text !== \"string\") {\n            text = JSON.stringify(text);\n        }\n        if (text.length > 2 ** 12) { //4kb max\n            console.warn(\"Message too long, not sending.\");\n            return;\n        }\n        let time = Date.now();\n        let message_id = `${global.room}--${crypto.randomUUID()}-${crypto.randomUUID()}`\n        let recipients_sessions: crypto_session[] = (encrytion_enabled && recipients) ? recipients.map(r => session_crypto.get_session(r)).filter(s => s) : []\n        lbsend(0, JSON.stringify(global.account), [time, text, message_id], global.room, encrytion_enabled, recipients_sessions);\n    },\n    ping: function (global: zapGlobals, recipients?: string[]) { // Send a ping\n        let recipients_sessions: crypto_session[] = (encrytion_enabled && recipients) ? recipients.map(r => session_crypto.get_session(r)).filter(s => s) : []\n        lbsend(1, JSON.stringify(global.account), Date.now(), global.room, true, recipients_sessions);\n    },\n    join: function (global: zapGlobals) { // Send a join notif\n        lbsend(2, JSON.stringify(global.account), Date.now(), global.room, false)\n        senders.crypto_request(global)\n    }, \n    crypto: function (global: zapGlobals, message: any) { // crypto base\n        if (typeof message !== \"string\") {\n            message = JSON.stringify(message);\n        }\n        lbsend(255, JSON.stringify(global.account), message, global.room, false);\n    },\n    crypto_request: function (global: zapGlobals) { // Request a public key\n        console.debug(\"Asking for keys\")\n        senders.crypto(global, { type: \"KEYrequest\", id: global.account.id });\n    },\n    crypto_response: function (global: zapGlobals) { // Send your public key\n         console.debug(\"sending key\")\n        if (encrytion_ready && typeof global.account != \"undefined\") {\n            window.crypto.subtle.exportKey(\"spki\", session_crypto.self_keys.publicKey).then((exported) => {\n                senders.crypto(global, { type: \"KEYresponse\", id: global.account.id, public: arrayBufferToBase64(exported) });\n            });\n        } else {\n            setTimeout(senders.crypto_response, 100, [global])\n        }\n    },\n    base: function (global: zapGlobals, a: any, b: any, c: any, d: any) { window.send(a, b, c, d) },\n    bind: function (global: zapGlobals) {\n        let new_sender: any = {}\n        Object.entries(senders).forEach(([k, v]) => {\n            new_sender[k] = function (...args: any[]) {\n                v(global, ...args)\n            }\n        })\n        return new_sender\n    }\n}\n\nlet recievers: {\n    message: Function, ping: Function,\n    crypto: Function, join: Function,\n    all: Function, bind: Function\n} = {\n    message: function (global: zapGlobals, account: Account, content: [timestamp: number, message: string, id: string], room: string) {\n        var timestamp = content[0], message = content[1], id = content[2];\n        console.debug(\"Received message in room \".concat(room, \":\"), { timestamp, account, message });\n        sendNotification(\"Zap Messenger:  \" + account.name + \" sent you a message!\", message);\n        let new_message: Message = {\n            timestamp: timestamp,\n            account,\n            content: message,\n            id\n        }\n        global.messages[room].push(new_message);\n        save_db_key(global.db, \"messages\", new_message);\n    },\n    ping: function (global: zapGlobals, account: Account, content: number, room: string) {\n        if (!Object.prototype.hasOwnProperty.call(global.online, room)) {\n            global.online[room] = [];\n        }\n        let old_l = global.online[room].filter(function (v) { v.account.id == account.id; });\n        if (old_l.length == 0) {\n            old_l = [{ account, last: 20000, list: [], avg: Date.now() }];\n        }\n        let old = old_l[0];\n        var list = old.list, last = old.last;\n        last = Date.now() - content;\n        list.push(last);\n        if (list.length > 10) {\n            list.shift();\n        }\n        let avg_1 = 0;\n        list.forEach(function (delta) {\n            avg_1 += delta;\n        });\n        avg_1 /= list.length;\n        global.online[room].unshift({ account, last: content, list: list, avg: avg_1 });\n    },\n    join: function (global: zapGlobals, account: Account, content: number, room: string) { //ping but only once and unencrypted\n        recievers.ping(global, account, content, room)\n    },\n    crypto: function (global: zapGlobals, account: Account, content: any, room: string) {\n        if (typeof content === \"string\") {\n            try {\n                content = JSON.parse(content);\n            } catch (e) {\n                console.error(\"Invalid JSON crypto:\", e.message, content);\n                return;\n            }\n        }\n\n        if (!content.type) {\n            console.warn(\"No type in crypto message:\", content);\n            return;\n        }\n\n        if (content.version > crypto_manager.version) {\n            console.warn(\"Other user is on a newer version of the cryptography manager:\", content.version, \">\", crypto_manager.version);\n            console.warn(\"Some features may not work as expected and may cause glitches.\");\n        }\n\n        if (content.type == \"KEYrequest\") {\n            console.debug(\"Got key request from \"+account.id)\n            senders.crypto_response(global, account);\n        } else if (content.type == \"KEYresponse\") {\n            if (content.public && content.public != \"E2EE DENIED\") {\n                console.debug(\"Got key from \"+account.id)\n                let session = session_crypto.add_session(account.id, content.public);\n            } else {\n                console.warn(\"User \".concat(account.id, \" denied sending their public key.\"));\n            }\n        } else {\n            console.warn(\"Unknown crypto message type:\", content);\n        }\n    },\n    all: async function (global: zapGlobals, type: number | string, stringed_account?: string, content?: any, room?: string) {\n        if (stringed_account == null) { // Encrypted message, find our block\n            let enc_msg: string[][] = (JSON.parse((type as string)) as string[][])\n\n            for (let i = 0; i < (enc_msg.length); i++) {\n                let message = enc_msg[i]\n                if (message[4] == global.account.id) {\n                    type = JSON.parse(await session_crypto.decrypt(base64ToArrayBuffer(message[0])))\n                    stringed_account = JSON.parse(await session_crypto.decrypt(base64ToArrayBuffer(message[1])))\n                    content = JSON.parse(await session_crypto.decrypt(base64ToArrayBuffer(message[2])))\n                    room = JSON.parse(await session_crypto.decrypt(base64ToArrayBuffer(message[3])))\n\n                    return await recievers.all(global, type, stringed_account, content, room);\n                }\n            };\n            console.warn(\"No block for us in encrypted message, ignoring.\");\n            return;\n        }\n\n        if (!global) {\n            return;\n        } // Make sure site is loaded fully first\n        if (!global.messages[room]) {\n            global.messages[room] = [];\n        }\n        let account: Account;\n        try {\n            account = JSON.parse(stringed_account);\n        } catch (e) {\n            console.error(\"Invalid JSON acc:\", e.message, stringed_account);\n            return;\n        }\n        if (type == 0) { recievers.message(global, account, content, room) } else\n            if (type == 1) { recievers.ping(global, account, content, room) } else\n                if (type == 2) { recievers.join(global, account, content, room) } else\n                    if (type == 255) { recievers.crypto(global, account, content, room) } else { console.warn(`${type} is a unknown message type`) }\n        global.reTick = true\n    },\n    bind: function (global: zapGlobals) {\n        let new_funcs: any = {}\n        new_funcs.message = (...args: any[]) => { recievers.message(global, ...args) }\n        new_funcs.ping = (...args: any[]) => { recievers.ping(global, ...args) }\n        new_funcs.join = (...args: any[]) => { recievers.join(global, ...args) }\n        new_funcs.crypto = (...args: any[]) => { recievers.crypto(global, ...args) }\n        new_funcs.all = (...args: any[]) => { recievers.all(global, ...args) }\n        return new_funcs\n    }\n}\n\nexport { save, load, save_db_key, load_db, load_db_key, senders, recievers, sendNotification, change_room_binder }", "import { senders } from './helpers'\nimport { online_bar, div, msg_container, servers_div, chat_div } from './elements'\nimport { zapGlobals, Server } from './main.d'\nimport { change_room_binder, save } from './helpers'\n\nfunction onPing(global: zapGlobals) {\n    if (!global.online[global.room]) { global.online[global.room] = [] }\n    senders.ping(global, window.zap_global.online[window.zap_global.room].map((ping) => { return ping.account.id }));\n    Array.prototype.slice.call(online_bar.children).forEach(function (v: HTMLElement) { online_bar.removeChild(v).remove(); });\n    let now = Date.now();\n    global.online[global.room].sort(function (a, b) { return a.account.name.localeCompare(b.account.name, undefined, { sensitivity: \"base\" }); });\n    let seen = new Set();\n    global.online[global.room] =\n        global.online[global.room].filter(function (user) {\n            if (seen.has(user.account.id)) {\n                return false;\n            }\n            seen.add(user.account.id);\n            return true;\n        });\n    global.online[global.room].forEach(function (value) {\n        if ((value.last - now + 65000) > 0) {\n            let container = document.createElement(\"div\");\n            container.className = \"user_status\";\n            let status_dot = document.createElement(\"div\");\n            status_dot.style.cssText = \"border-radius:9999px; border-width:2px; width:15px; height:15px; \" + ((value.avg < 900) ? \"background-color: green;\" : ((value.avg < 30000) ? \"background-color: yellow;\" : \"background-color: red;\"));\n            container.appendChild(status_dot);\n            let username_text = document.createElement(\"p\");\n            username_text.innerText = value.account.name;\n            username_text.style.margin = \"5px\";\n            username_text.style.marginLeft = \"10px\";\n            container.appendChild(username_text);\n            online_bar.appendChild(container);\n        }\n    });\n}\n\nfunction onTick(global: zapGlobals) {\n    console.log(\"A\")\n    if (!global.reTick) { return };\n    global.reTick = false\n\n    if (!div) {\n        console.warn(\"Main div not found, reloading page to avoid conflicts.\");\n        location.reload(); // Reload if div is not found\n        return;\n    }\n\n    const messages = global.messages[global.room] || [];\n    console.log(messages)\n    const start = global.lastRenderedIndex\n    for (let i = start; i < Math.min(messages.length, start + 100); i++) {\n        let msg = messages[i];\n        try {\n            let msg_div = document.createElement(\"div\");\n            msg_div.className = \"msg\";\n            msg_div.id = \"msg_\" + msg.id;\n            msg_div.innerHTML = `<strong>${msg.account.name}</strong> \n            <span class=\"timestamp\">${new Date(msg.timestamp).toLocaleTimeString()}</span><br>`;\n            let container = document.createElement('div');\n            container.innerHTML = msg.content;\n            msg_div.appendChild(container)\n\n            msg_container.appendChild(msg_div);\n            global.lastRenderedIndex = messages.length;\n            if ((msg_container.scrollHeight - msg_container.scrollTop - msg_container.clientHeight) <= 200) {\n                msg_container.scrollTop = msg_container.scrollHeight\n            }\n        } catch (e) {\n            console.log(\"Failed to render message\", msg, e)\n        }\n    }\n\n    global.servers.forEach(function (server: Server, i) {\n        let server_div = document.getElementById(\"server_\" + server.id);\n        let server_html = `${server.img ? `<img src=\"${server.img}\" alt=\"${server.nickname}\">` : \"\"} ${server.nickname}`;\n        if (!server_div) {\n            server_div = document.createElement(\"div\");\n            server_div.className = \"server\";\n            server_div.id = \"server_\" + server.id;\n            server_div.innerHTML = server_html;\n            server_div.onclick = change_room_binder(global, server.id, server_div);\n            servers_div.insertBefore(server_div, servers_div.lastChild);\n        } else {\n            server_div.innerHTML = server_html;\n            server_div.onclick = change_room_binder(global, server.id, server_div);\n        }\n    });\n\n    div.addEventListener(\"contextmenu\", function (event: PointerEvent) {\n        const target = event.target as Element\n        const serverEl = target.closest('[id^=\"server_\"]'); // safer than direct id access\n        if (serverEl && event.button === 2) {\n            event.preventDefault();\n            const serverId = serverEl.id.replace(\"server_\", \"\");\n            let index = 0;\n            for (const server of global.servers) {\n                if (server.id === serverId) { break };\n                index++;\n            }\n            if (index === global.servers.length) { index = -1 }; // not found\n\n            if (index !== -1) {\n                const removed = global.servers.splice(index, 1)[0];\n                save(\"servers\", global.servers);\n\n                document.getElementById(\"servers_div\").removeChild(serverEl);\n                console.log(`Server ${removed.nickname} removed.`);\n                if (global.room === serverId) {\n                    global.room = global.servers.length > 0 ? global.servers[0].id : \"1\";\n                    global.lastRenderedIndex = 0;\n                    chat_div.innerHTML = \"\";\n                }\n\n                document.querySelectorAll('.server').forEach(el => el.classList.remove('selected'));\n                const newSelected = document.getElementById(\"server_\" + global.room);\n                if (newSelected) {\n                    newSelected.classList.add('selected');\n                }\n            }\n\n            return;\n        }\n    });\n}\n\nfunction bind(global: zapGlobals) {\n    let new_funcs: any = {}\n    new_funcs.onTick = function () { onTick(global) }\n    new_funcs.onPing = function () { onPing(global) }\n    return new_funcs\n}\n\nexport { onPing, onTick, bind }\n", "class Editor {\n    element:Element\n    theme:string\n    constructor (selector:string | Element, theme = \"light\") {\n        if (typeof selector == \"string\") {\n            this.element = document.querySelector(selector)\n        } else {\n            this.element = selector\n        }\n        this.theme = theme\n\n        let modifier_bar = document.createElement(\"div\")\n        modifier_bar.style.width = \"100%\"\n        modifier_bar.style.height = \"10%\"\n        modifier_bar.style.backgroundColor = theme == \"light\" ? \"#f0f0f0\" : \"#2e2e2e\"\n        modifier_bar.style.display = \"flex\"\n        modifier_bar.style.alignItems = \"center\"\n        modifier_bar.style.padding = \"0 10px\"\n        modifier_bar.style.boxSizing = \"border-box\"\n        this.element.appendChild(modifier_bar)\n\n        let bold_button = document.createElement(\"button\")\n        bold_button.innerHTML = \"<b>B</b>\"\n        bold_button.style.marginRight = \"10px\"\n        bold_button.onclick = () => {\n            document.execCommand(\"bold\")\n        }\n        modifier_bar.appendChild(bold_button)\n\n        let italic_button = document.createElement(\"button\")\n        italic_button.innerHTML = \"<i>I</i>\"\n        italic_button.style.marginRight = \"10px\"\n        italic_button.onclick = () => {\n            document.execCommand(\"italic\")\n        }\n        modifier_bar.appendChild(italic_button)\n\n        let underline_button = document.createElement(\"button\")\n        underline_button.innerHTML = \"<u>U</u>\"\n        underline_button.style.marginRight = \"10px\"\n        underline_button.onclick = () => {\n            document.execCommand(\"underline\")\n        }\n        modifier_bar.appendChild(underline_button)\n\n        let strike_button = document.createElement(\"button\")\n        strike_button.innerHTML = \"<s>S</s>\"\n        strike_button.style.marginRight = \"10px\"\n        strike_button.onclick = () => {\n            document.execCommand(\"strikeThrough\")\n        }\n        modifier_bar.appendChild(strike_button)\n\n        let file_picker = document.createElement(\"input\")\n        file_picker.type = \"file\"\n        file_picker.accept = \"image/*\"\n        file_picker.style.display = \"none\"\n        file_picker.onchange = () => {\n            let file = file_picker.files[0]\n            let reader = new FileReader()\n            reader.onload = (e) => {\n                let img = document.createElement(\"img\")\n                img.src = e.target.result as string\n                img.style.maxWidth = \"100%\"\n                img.style.height = \"auto\"\n                this.element.querySelector(\"#textinput\").appendChild(img)\n            }\n            reader.readAsDataURL(file)\n        }\n        modifier_bar.appendChild(file_picker)\n\n        let photo_button = document.createElement(\"button\")\n        photo_button.innerHTML = \"\uD83D\uDCF7\"\n        photo_button.style.marginRight = \"10px\"\n        photo_button.onclick = () => file_picker.click()\n        modifier_bar.appendChild(photo_button)\n\n        let text_input = document.createElement(\"div\")\n        text_input.contentEditable = \"true\"\n        text_input.id = \"textinput\"\n        text_input.style.width = \"100%\"\n        text_input.style.height = \"90%\"\n        text_input.style.outline = \"none\"\n        text_input.style.overflowY = \"auto\"\n        text_input.style.padding = \"10px\"\n        text_input.style.boxSizing = \"border-box\"\n        text_input.style.backgroundColor = theme == \"light\" ? \"white\" : \"#1e1e1e\"\n        text_input.style.color = theme == \"light\" ? \"black\" : \"white\"\n        text_input.style.fontFamily = \"Arial, sans-serif\"\n        text_input.style.fontSize = \"14px\"\n        this.element.appendChild(text_input)\n    }\n\n    getHTML () {\n        return this.element.querySelector(\"#textinput\").innerHTML\n    }\n\n    setHTML (html:string) {\n        this.element.querySelector(\"#textinput\").innerHTML = html\n    }\n\n    destroy () {\n        this.element.innerHTML = \"\"\n    }\n}\n\nexport {Editor}", "import { save, load, senders, recievers, change_room_binder } from './helpers'\nimport { settings_menu, server_adder, msg_send, settings_button } from './elements'\nimport { zapGlobals } from './main.d'\nimport { bind } from './loops'\nimport { Editor } from './editor'\n\ndeclare global {\n    interface Window {\n        send: Function;\n        get: Function;\n        zap_global: zapGlobals;\n    }\n}\n\nwindow.zap_global = {\n    messages: {},\n    room: \"1\",\n    servers: load(\"servers\", [{ id: \"1\", nickname: \"General\", img: \"\" }]), // {id, nickname, img}  \n    account: load(\"account\", {}), // Default \n    reTick: true,\n    lastRenderedIndex: 0,\n    dark: !load(\"dark\", window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches), // Invert toggle for later inversion\n    online: {},\n    editor: undefined,\n    db: undefined\n};\n\nlet normalizeOps = function normalizeOps(ops: [string, IDBObjectStoreParameters?][]) {\n    const final: Record<string, [string, IDBObjectStoreParameters?]> = {};\n\n    for (let [name, opts] of ops) {\n        const op = name[0];\n        const store = name.slice(1);\n        final[store] = [op, opts]; // later ops overwrite earlier ones\n    }\n\n    return Object.entries(final).map(([store, [op, opts]]) => [op + store, opts] as [string, IDBObjectStoreParameters?]);\n}\n\nlet request = window.indexedDB.open(\"ZapMessengerRW\", 1);\nrequest.onsuccess = function (e) {\n    window.zap_global.db = request.result\n}\nrequest.onupgradeneeded = (event) => {\n    const db = request.result;\n    let needed: [string, IDBObjectStoreParameters?][] = [];\n\n    switch (event.oldVersion) {\n        case 0:\n            needed.push([\"+ messages\", { keyPath: \"id\", autoIncrement: true }]);\n        case 1:\n            needed.push([\"-+ messages\", { keyPath: \"id\", autoIncrement: false }]);\n    }\n\n    needed = normalizeOps(needed)\n\n    needed.forEach(([fullop, options]) => {\n        const [op, name] = fullop.split(\" \", 2); // \"op storeName\"\n        if (op === \"+\") {\n            if (!db.objectStoreNames.contains(name)) {\n                db.createObjectStore(name, options);\n            } else {\n                console.warn(`Cannot add ${name} because it already exists`)\n            }\n        } else if (op === \"-\") {\n            if (db.objectStoreNames.contains(name)) {\n                db.deleteObjectStore(name);\n            } else {\n                console.warn(`Cannot remove ${name} because it doesn't exist`)\n            }\n        } else if (op === \"-+\") {\n            if (db.objectStoreNames.contains(name)) {\n                db.deleteObjectStore(name);\n            }\n            db.createObjectStore(name, options);\n        }\n    });\n};\n\nif (!window.zap_global.account.name) {\n    promptForAccount();\n}\n\nlet {onPing, onTick} = bind(window.zap_global)\n\nif (Notification.permission === \"default\") {\n    Notification.requestPermission();\n}\n\nfunction promptForAccount() {\n    let name = null;\n    while (!name || name.trim().length === 0) {\n        name = prompt(\"Enter your name to continue:\");\n        if (name === null) {\n            alert(\"You must enter a name to use the chat.\");\n        }\n    }\n    window.zap_global.account = {\n        name: name.trim(),\n        id: crypto.randomUUID()\n    };\n    save(\"account\", window.zap_global.account);\n}\n\nmsg_send.onclick = function () {\n    if (window.zap_global.editor) {\n        let content = window.zap_global.editor.getHTML();\n        window.zap_global.editor.setHTML('');\n        let targets = window.zap_global.online[window.zap_global.room].map((ping)=>{return ping.account.id})\n        console.log(\"Sending to targets:\", targets);\n        senders.message(window.zap_global,content,targets);\n    }\n};\n\nserver_adder.onclick = function () {\n    let server_name, server_id, server_img;\n    while (!server_name) {\n        server_name = prompt(\"Enter server name:\");\n    }\n    while (!server_id) {\n        server_id = prompt(\"Enter server ID:\");\n    }\n    server_img = prompt(\"Enter server image URL (optional):\", \"\");\n    window.zap_global.servers.push({ id: server_id, nickname: server_name, img: server_img });\n    window.zap_global.reTick = true\n    save(\"servers\", window.zap_global.servers);\n}\n\n//#region settings\nsettings_menu.classList.add(\"closed\");\nsettings_button.onclick = function () {\n    if (settings_menu.classList.contains(\"open\")) {\n        settings_menu.classList.remove(\"open\");\n        settings_menu.classList.add(\"closed\");\n    }\n    else {\n        settings_menu.classList.remove(\"closed\");\n        settings_menu.classList.add(\"open\");\n    }\n};\n//#region settings menu\nlet dark_toggle = document.createElement(\"div\");\ndark_toggle.classList.add(\"button\");\ndark_toggle.onclick = function () {\n    window.zap_global.dark = !window.zap_global.dark;\n    save(\"dark\", window.zap_global.dark);\n    if (window.zap_global.dark) {\n        document.documentElement.classList.add(\"dark\");\n    }\n    else {\n        document.documentElement.classList.remove(\"dark\");\n    }\n    let md = \"\";\n    if (window.zap_global.editor) {\n        md = window.zap_global.editor.getHTML();\n        window.zap_global.editor.destroy();\n    }\n    window.zap_global.editor = new Editor(\n        'div#msg_input',\n        window.zap_global.dark ? 'dark' : 'light'\n    );\n    window.zap_global.editor.setHTML(md);\n};\nlet dark_img = document.createElement(\"img\");\ndark_img.src = \"https://cdn-icons-png.flaticon.com/512/12377/12377255.png \";\ndark_img.style.height = \"20px\";\ndark_img.style.width = \"20px\"; \ndark_toggle.appendChild(dark_img);\nsettings_menu.appendChild(dark_toggle);\n//#endregion \nfunction onLoad() {\n    dark_toggle.click(); // Set initial dark mode state\n    setInterval(onTick, 250); // Start the animation frame loop\n    let temp = document.createElement(\"div\")\n    change_room_binder(window.zap_global,\"1\",temp)()\n    temp.remove()\n}\n\ndocument.title = \"Zap Messenger Rewritten\"\nlet id = setInterval((function () {\n    if (document.readyState == \"complete\") {\n        clearInterval(id);\n        onLoad();\n    }\n}), 100);\nsetInterval(onPing, 500);\nwindow.get = recievers.bind(window.zap_global).all"],
  "mappings": "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",
  "names": ["msg_send", "online_bar", "msg_input", "chat_div", "msg_container", "servers_div", "info_floater", "server_adder", "typing_indicator", "div", "css_element", "settings_menu", "settings_button", "crypto_session", "_crypto_session", "id", "other_key", "self_keys", "message", "encoded", "ciphertext", "decrypted", "data", "other_key_buffer", "c", "self_public_key_buffer", "self_private_key_buffer", "self_public_key", "self_private_key", "makeKeys", "keyPair", "publicKey", "privateKey", "crypto_manager", "_crypto_manager", "imported_key", "new_session", "sessions_serialized", "session", "manager", "session_data", "encrytion_enabled", "encrytion_ready", "session_crypto", "crypto_manager", "manager", "sendNotification", "title", "message", "change_room_binder", "global", "room", "element", "msg_container", "server", "server_div", "load_db", "messages", "room_messages", "a", "b", "send_join", "senders", "c", "d", "lbsend", "encrypt", "encryption_sessions", "allPromises", "session", "enc_a", "enc_b", "enc_c", "enc_d", "str_a", "arrayBufferToBase64", "str_b", "str_c", "str_d", "str_msgs", "save", "key", "value", "load", "Default", "e", "save_db_key", "db", "table", "resolve", "reject", "store", "request", "load_db", "db", "table", "resolve", "reject", "request", "base64ToArrayBuffer", "base64", "binary", "len", "bytes", "i", "arrayBufferToBase64", "buffer", "senders", "global", "text", "recipients", "time", "message_id", "recipients_sessions", "encrytion_enabled", "r", "session_crypto", "s", "lbsend", "message", "encrytion_ready", "exported", "a", "b", "c", "d", "new_sender", "k", "v", "args", "recievers", "account", "content", "room", "timestamp", "id", "sendNotification", "new_message", "save_db_key", "old_l", "old", "list", "last", "avg_1", "delta", "e", "crypto_manager", "session", "type", "stringed_account", "enc_msg", "new_funcs", "onPing", "global", "senders", "ping", "online_bar", "v", "now", "a", "b", "seen", "user", "value", "container", "status_dot", "username_text", "onTick", "div", "messages", "start", "i", "msg", "msg_div", "msg_container", "e", "server", "server_div", "server_html", "change_room_binder", "servers_div", "event", "serverEl", "serverId", "index", "removed", "save", "chat_div", "el", "newSelected", "bind", "new_funcs", "Editor", "selector", "theme", "modifier_bar", "bold_button", "italic_button", "underline_button", "strike_button", "file_picker", "file", "reader", "e", "img", "photo_button", "text_input", "html", "load", "normalizeOps", "ops", "final", "name", "opts", "op", "store", "request", "event", "db", "needed", "fullop", "options", "promptForAccount", "onPing", "onTick", "bind", "save", "msg_send", "content", "targets", "ping", "senders", "server_adder", "server_name", "server_id", "server_img", "settings_menu", "settings_button", "dark_toggle", "md", "Editor", "dark_img", "onLoad", "temp", "change_room_binder", "id", "recievers"]
}
